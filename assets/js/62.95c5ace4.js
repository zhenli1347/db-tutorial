(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{396:function(a,t,n){"use strict";n.r(t);var e=n(4),s=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"elasticsearch-聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-聚合"}},[a._v("#")]),a._v(" Elasticsearch 聚合")]),a._v(" "),t("p",[a._v("Elasticsearch 是一个分布式的全文搜索引擎，索引和搜索是 Elasticsearch 的基本功能。事实上，Elasticsearch 的聚合（Aggregations）功能也十分强大，允许在数据上做复杂的分析统计。Elasticsearch 提供的聚合分析功能主要有"),t("strong",[a._v("指标聚合(metrics aggregations)")]),a._v("、"),t("strong",[a._v("桶聚合(bucket aggregations)")]),a._v("、"),t("strong",[a._v("管道聚合(pipeline aggregations)")]),a._v(" 和 "),t("strong",[a._v("矩阵聚合(matrix aggregations)")]),a._v(" 四大类，管道聚合和矩阵聚合官方说明是在试验阶段，后期会完全更改或者移除，这里不再对管道聚合和矩阵聚合进行讲解。")]),a._v(" "),t("h2",{attrs:{id:"聚合的具体结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合的具体结构"}},[a._v("#")]),a._v(" 聚合的具体结构")]),a._v(" "),t("p",[a._v("所有的聚合，无论它们是什么类型，都遵从以下的规则。")]),a._v(" "),t("ul",[t("li",[a._v("使用查询中同样的 JSON 请求来定义它们，而且你是使用键 aggregations 或者是 aggs 来进行标记。需要给每个聚合起一个名字，指定它的类型以及和该类型相关的选项。")]),a._v(" "),t("li",[a._v("它们运行在查询的结果之上。和查询不匹配的文档不会计算在内，除非你使用 global 聚集将不匹配的文档囊括其中。")]),a._v(" "),t("li",[a._v("可以进一步过滤查询的结果，而不影响聚集。")])]),a._v(" "),t("p",[a._v("以下是聚合的基本结构：")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"aggregations"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \x3c!-- 最外层的聚合键，也可以缩写为 aggs --\x3e\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"<aggregation_name>"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \x3c!-- 聚合的自定义名字 --\x3e\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"<aggregation_type>"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \x3c!-- 聚合的类型，指标相关的，如 max、min、avg、sum，桶相关的 terms、filter 等 --\x3e\n            <aggregation_body> \x3c!-- 聚合体：对哪些字段进行聚合，可以取字段的值，也可以是脚本计算的结果 --\x3e\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"meta"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("<meta_data_body>"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("? \x3c!-- 元 --\x3e\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"aggregations"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("<sub_aggregation>"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("+ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("? \x3c!-- 在聚合里面在定义子聚合 --\x3e\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"<aggregation_name_2>"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" ... "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("* \x3c!-- 聚合的自定义名字 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" --\x3e\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ul",[t("li",[t("strong",[a._v("在最上层有一个 aggregations 的键，可以缩写为 aggs")]),a._v("。")]),a._v(" "),t("li",[a._v("在下面一层，需要为聚合指定一个名字。可以在请求的返回中看到这个名字。在同一个请求中使用多个聚合时，这一点非常有用，它让你可以很容易地理解每组结果的含义。")]),a._v(" "),t("li",[a._v("最后，必须要指定聚合的类型。")])]),a._v(" "),t("blockquote",[t("p",[a._v("关于聚合分析的值来源，可以"),t("strong",[a._v("取字段的值")]),a._v("，也可以是"),t("strong",[a._v("脚本计算的结果")]),a._v("。")]),a._v(" "),t("p",[a._v("但是用脚本计算的结果时，需要注意脚本的性能和安全性；尽管多数聚集类型允许使用脚本，但是脚本使得聚集变得缓慢，因为脚本必须在每篇文档上运行。为了避免脚本的运行，可以在索引阶段进行计算。")]),a._v(" "),t("p",[a._v("此外，脚本也可以被人可能利用进行恶意代码攻击，尽量使用沙盒（sandbox）内的脚本语言。")])]),a._v(" "),t("p",[a._v("示例：查询所有球员的平均年龄是多少，并对球员的平均薪水加 188（也可以理解为每名球员加 188 后的平均薪水）。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("POST /player/_search?size"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"aggs"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"avg_age"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"avg"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"field"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"age"')]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"avg_salary_188"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"avg"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"script"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"source"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"doc.salary.value + 188"')]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"指标聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指标聚合"}},[a._v("#")]),a._v(" 指标聚合")]),a._v(" "),t("p",[a._v("指标聚合（又称度量聚合）主要从不同文档的分组中提取统计数据，或者，从来自其他聚合的文档桶来提取统计数据。")]),a._v(" "),t("p",[a._v("这些统计数据通常来自数值型字段，如最小或者平均价格。用户可以单独获取每项统计数据，或者也可以使用 stats 聚合来同时获取它们。更高级的统计数据，如平方和或者是标准差，可以通过 extended stats 聚合来获取。")]),a._v(" "),t("h3",{attrs:{id:"max-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#max-aggregation"}},[a._v("#")]),a._v(" Max Aggregation")]),a._v(" "),t("p",[a._v("Max Aggregation 用于最大值统计。例如，统计 sales 索引中价格最高的是哪本书，并且计算出对应的价格的 2 倍值，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /sales/_search?size=0\n{\n  "aggs" : {\n    "max_price" : {\n      "max" : {\n        "field" : "price"\n      }\n    },\n    "max_price_2" : {\n      "max" : {\n        "field" : "price",\n        "script": {\n          "source": "_value * 2.0"\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[t("strong",[a._v("指定的 field，在脚本中可以用 _value 取字段的值")]),a._v("。")]),a._v(" "),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "max_price": {\n      "value": 188.0\n    },\n    "max_price_2": {\n      "value": 376.0\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"min-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#min-aggregation"}},[a._v("#")]),a._v(" Min Aggregation")]),a._v(" "),t("p",[a._v("Min Aggregation 用于最小值统计。例如，统计 sales 索引中价格最低的是哪本书，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /sales/_search?size=0\n{\n  "aggs" : {\n    "min_price" : {\n      "min" : {\n        "field" : "price"\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "min_price": {\n      "value": 18.0\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"avg-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#avg-aggregation"}},[a._v("#")]),a._v(" Avg Aggregation")]),a._v(" "),t("p",[a._v("Avg Aggregation 用于计算平均值。例如，统计 exams 索引中考试的平均分数，如未存在分数，默认为 60 分，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /exams/_search?size=0\n{\n  "aggs" : {\n    "avg_grade" : {\n      "avg" : {\n        "field" : "grade",\n        "missing": 60\n      }\n    }\n  }\n}\n')])])]),t("p",[t("strong",[a._v("如果指定字段没有值，可以通过 missing 指定默认值；若未指定默认值，缺失该字段值的文档将被忽略（计算）")]),a._v("。")]),a._v(" "),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "avg_grade": {\n      "value": 78.0\n    }\n  }\n}\n')])])]),t("p",[a._v("除了常规的平均值聚合计算外，elasticsearch 还提供了加权平均值的聚合计算，详情参见 "),t("a",{attrs:{href:"https://www.knowledgedict.com/tutorial/elasticsearch-aggregations-metrics-weighted-avg-aggregation.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Elasticsearch 指标聚合之 Weighted Avg Aggregation"),t("OutboundLink")],1),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"sum-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sum-aggregation"}},[a._v("#")]),a._v(" Sum Aggregation")]),a._v(" "),t("p",[a._v("Sum Aggregation 用于计算总和。例如，统计 sales 索引中 type 字段中匹配 hat 的价格总和，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /exams/_search?size=0\n{\n  "query" : {\n    "constant_score" : {\n      "filter" : {\n        "match" : { "type" : "hat" }\n      }\n    }\n  },\n  "aggs" : {\n    "hat_prices" : {\n      "sum" : { "field" : "price" }\n    }\n  }\n}\n')])])]),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "hat_prices": {\n      "value": 567.0\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"value-count-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#value-count-aggregation"}},[a._v("#")]),a._v(" Value Count Aggregation")]),a._v(" "),t("p",[a._v("Value Count Aggregation 可按字段统计文档数量。例如，统计 books 索引中包含 author 字段的文档数量，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /books/_search?size=0\n{\n  "aggs" : {\n    "doc_count" : {\n      "value_count" : { "field" : "author" }\n    }\n  }\n}\n')])])]),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "doc_count": {\n      "value": 5\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"cardinality-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cardinality-aggregation"}},[a._v("#")]),a._v(" Cardinality Aggregation")]),a._v(" "),t("p",[a._v("Cardinality Aggregation 用于基数统计，其作用是先执行类似 SQL 中的 distinct 操作，去掉集合中的重复项，然后统计去重后的集合长度。例如，在 books 索引中对 language 字段进行 cardinality 操作可以统计出编程语言的种类数，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /books/_search?size=0\n{\n  "aggs" : {\n    "all_lan" : {\n      "cardinality" : { "field" : "language" }\n    },\n    "title_cnt" : {\n      "cardinality" : { "field" : "title.keyword" }\n    }\n  }\n}\n')])])]),t("p",[t("strong",[a._v("假设 title 字段为文本类型（text），去重时需要指定 keyword，表示把 title 作为整体去重，即不分词统计")]),a._v("。")]),a._v(" "),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "all_lan": {\n      "value": 8\n    },\n    "title_cnt": {\n      "value": 18\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"stats-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stats-aggregation"}},[a._v("#")]),a._v(" Stats Aggregation")]),a._v(" "),t("p",[a._v("Stats Aggregation 用于基本统计，会一次返回 count、max、min、avg 和 sum 这 5 个指标。例如，在 exams 索引中对 grade 字段进行分数相关的基本统计，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /exams/_search?size=0\n{\n  "aggs" : {\n    "grades_stats" : {\n      "stats" : { "field" : "grade" }\n    }\n  }\n}\n')])])]),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "grades_stats": {\n      "count": 2,\n      "min": 50.0,\n      "max": 100.0,\n      "avg": 75.0,\n      "sum": 150.0\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"extended-stats-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extended-stats-aggregation"}},[a._v("#")]),a._v(" Extended Stats Aggregation")]),a._v(" "),t("p",[a._v("Extended Stats Aggregation 用于高级统计，和基本统计功能类似，但是会比基本统计多出以下几个统计结果，sum_of_squares（平方和）、variance（方差）、std_deviation（标准差）、std_deviation_bounds（平均值加/减两个标准差的区间）。在 exams 索引中对 grade 字段进行分数相关的高级统计，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET /exams/_search?size=0\n{\n  "aggs" : {\n    "grades_stats" : {\n      "extended_stats" : { "field" : "grade" }\n    }\n  }\n}\n')])])]),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "grades_stats": {\n      "count": 2,\n      "min": 50.0,\n      "max": 100.0,\n      "avg": 75.0,\n      "sum": 150.0,\n      "sum_of_squares": 12500.0,\n      "variance": 625.0,\n      "std_deviation": 25.0,\n      "std_deviation_bounds": {\n        "upper": 125.0,\n        "lower": 25.0\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"percentiles-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#percentiles-aggregation"}},[a._v("#")]),a._v(" Percentiles Aggregation")]),a._v(" "),t("p",[a._v("Percentiles Aggregation 用于百分位统计。百分位数是一个统计学术语，如果将一组数据从大到小排序，并计算相应的累计百分位，某一百分位所对应数据的值就称为这一百分位的百分位数。默认情况下，累计百分位为 [ 1, 5, 25, 50, 75, 95, 99 ]。以下例子给出了在 latency 索引中对 load_time 字段进行加载时间的百分位统计，查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET latency/_search\n{\n  "size": 0,\n  "aggs" : {\n    "load_time_outlier" : {\n      "percentiles" : {\n        "field" : "load_time"\n      }\n    }\n  }\n}\n')])])]),t("p",[t("strong",[a._v("需要注意的是，如上的 "),t("code",[a._v("load_time")]),a._v(" 字段必须是数字类型")]),a._v("。")]),a._v(" "),t("p",[a._v("聚合结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "load_time_outlier": {\n      "values" : {\n        "1.0": 5.0,\n        "5.0": 25.0,\n        "25.0": 165.0,\n        "50.0": 445.0,\n        "75.0": 725.0,\n        "95.0": 945.0,\n        "99.0": 985.0\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("百分位的统计也可以指定 percents 参数指定百分位，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET latency/_search\n{\n  "size": 0,\n  "aggs" : {\n    "load_time_outlier" : {\n      "percentiles" : {\n        "field" : "load_time",\n        "percents": [60, 80, 95]\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"percentiles-ranks-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#percentiles-ranks-aggregation"}},[a._v("#")]),a._v(" Percentiles Ranks Aggregation")]),a._v(" "),t("p",[a._v("Percentiles Ranks Aggregation 与 Percentiles Aggregation 统计恰恰相反，就是想看当前数值处在什么范围内（百分位）， 假如你查一下当前值 500 和 600 所处的百分位，发现是 90.01 和 100，那么说明有 90.01 % 的数值都在 500 以内，100 % 的数值在 600 以内。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET latency/_search\n{\n  "size": 0,\n    "aggs" : {\n      "load_time_ranks" : {\n        "percentile_ranks" : {\n          "field" : "load_time",\n          "values" : [500, 600]\n        }\n      }\n  }\n}\n')])])]),t("p",[t("strong",[t("code",[a._v("同样 load_time")]),a._v(" 字段必须是数字类型")]),a._v("。")]),a._v(" "),t("p",[a._v("返回结果大概类似如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "load_time_ranks": {\n      "values" : {\n        "500.0": 90.01,\n        "600.0": 100.0\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("可以设置 "),t("code",[a._v("keyed")]),a._v(" 参数为 "),t("code",[a._v("true")]),a._v("，将对应的 values 作为桶 key 一起返回，默认是 "),t("code",[a._v("false")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('GET latency/_search\n{\n  "size": 0,\n  "aggs": {\n    "load_time_ranks": {\n      "percentile_ranks": {\n        "field": "load_time",\n        "values": [500, 600],\n        "keyed": true\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("返回结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "load_time_ranks": {\n      "values": [\n        {\n          "key": 500.0,\n          "value": 90.01\n        },\n        {\n          "key": 600.0,\n          "value": 100.0\n        }\n      ]\n    }\n  }\n}\n')])])]),t("h2",{attrs:{id:"桶聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#桶聚合"}},[a._v("#")]),a._v(" 桶聚合")]),a._v(" "),t("p",[a._v("bucket 可以理解为一个桶，它会遍历文档中的内容，凡是符合某一要求的就放入一个桶中，分桶相当于 SQL 中的 group by。从另外一个角度，可以将指标聚合看成单桶聚合，即把所有文档放到一个桶中，而桶聚合是多桶型聚合，它根据相应的条件进行分组。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("种类")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("描述/场景")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("词项聚合（Terms Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("用于分组聚合，让用户得知文档中每个词项的频率，它返回每个词项出现的次数。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("差异词项聚合（Significant Terms Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("它会返回某个词项在整个索引中和在查询结果中的词频差异，这有助于我们发现搜索场景中有意义的词。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("过滤器聚合（Filter Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("指定过滤器匹配的所有文档到单个桶（bucket），通常这将用于将当前聚合上下文缩小到一组特定的文档。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("多过滤器聚合（Filters Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("指定多个过滤器匹配所有文档到多个桶（bucket）。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("范围聚合（Range Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("范围聚合，用于反映数据的分布情况。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("日期范围聚合（Date Range Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("专门用于日期类型的范围聚合。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("IP 范围聚合（IP Range Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("用于对 IP 类型数据范围聚合。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("直方图聚合（Histogram Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("可能是数值，或者日期型，和范围聚集类似。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("时间直方图聚合（Date Histogram Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("时间直方图聚合，常用于按照日期对文档进行统计并绘制条形图。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("空值聚合（Missing Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("空值聚合，可以把文档集中所有缺失字段的文档分到一个桶中。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("地理点范围聚合（Geo Distance Aggregation）")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("用于对地理点（geo point）做范围统计。")])])])]),a._v(" "),t("h3",{attrs:{id:"terms-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#terms-aggregation"}},[a._v("#")]),a._v(" Terms Aggregation")]),a._v(" "),t("p",[a._v("Terms Aggregation 用于词项的分组聚合。最为经典的用例是获取 X 中最频繁（top frequent）的项目，其中 X 是文档中的某个字段，如用户的名称、标签或分类。由于 terms 聚集统计的是每个词条，而不是整个字段值，因此通常需要在一个非分析型的字段上运行这种聚集。原因是, 你期望“big data”作为词组统计，而不是“big”单独统计一次，“data”再单独统计一次。")]),a._v(" "),t("p",[a._v("用户可以使用 terms 聚集，从分析型字段（如内容）中抽取最为频繁的词条。还可以使用这种信息来生成一个单词云。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  "aggs": {\n    "profit_terms": {\n      "terms": { // terms 聚合 关键字\n        "field": "profit",\n        ......\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("在 terms 分桶的基础上，还可以对每个桶进行指标统计，也可以基于一些指标或字段值进行排序。示例如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  "aggs": {\n    "item_terms": {\n      "terms": {\n        "field": "item_id",\n        "size": 1000,\n        "order":[{\n          "gmv_stat": "desc"\n        },{\n          "gmv_180d": "desc"\n        }]\n      },\n      "aggs": {\n        "gmv_stat": {\n          "sum": {\n            "field": "gmv"\n          }\n        },\n        "gmv_180d": {\n          "sum": {\n            "script": "doc[\'gmv_90d\'].value*2"\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("返回的结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "hospital_id_agg": {\n      "doc_count_error_upper_bound": 0,\n      "sum_other_doc_count": 260,\n      "buckets": [\n        {\n          "key": 23388,\n          "doc_count": 18,\n          "gmv_stat": {\n            "value": 176220\n          },\n          "gmv_180d": {\n            "value": 89732\n          }\n        },\n        {\n          "key": 96117,\n          "doc_count": 16,\n          "gmv_stat": {\n            "value": 129306\n          },\n          "gmv_180d": {\n            "value": 56988\n          }\n        },\n        ...\n      ]\n    }\n  }\n}\n')])])]),t("p",[a._v("默认情况下返回按文档计数从高到低的前 10 个分组，可以通过 size 参数指定返回的分组数。")]),a._v(" "),t("h3",{attrs:{id:"filter-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter-aggregation"}},[a._v("#")]),a._v(" Filter Aggregation")]),a._v(" "),t("p",[a._v("Filter Aggregation 是过滤器聚合，可以把符合过滤器中的条件的文档分到一个桶中，即是单分组聚合。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  "aggs": {\n    "age_terms": {\n      "filter": {"match":{"gender":"F"}},\n      "aggs": {\n        "avg_age": {\n          "avg": {\n            "field": "age"\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"filters-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filters-aggregation"}},[a._v("#")]),a._v(" Filters Aggregation")]),a._v(" "),t("p",[a._v("Filters Aggregation 是多过滤器聚合，可以把符合多个过滤条件的文档分到不同的桶中，即每个分组关联一个过滤条件，并收集所有满足自身过滤条件的文档。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  "size": 0,\n  "aggs": {\n    "messages": {\n      "filters": {\n        "filters": {\n          "errors": { "match": { "body": "error" } },\n          "warnings": { "match": { "body": "warning" } }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("在这个例子里，我们分析日志信息。聚合会创建两个关于日志数据的分组，一个收集包含错误信息的文档，另一个收集包含告警信息的文档。而且每个分组会按月份划分。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "messages": {\n      "buckets": {\n        "errors": {\n          "doc_count": 1\n        },\n        "warnings": {\n          "doc_count": 2\n        }\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"range-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#range-aggregation"}},[a._v("#")]),a._v(" Range Aggregation")]),a._v(" "),t("p",[a._v("Range Aggregation 范围聚合是一个基于多组值来源的聚合，可以让用户定义一系列范围，每个范围代表一个分组。在聚合执行的过程中，从每个文档提取出来的值都会检查每个分组的范围，并且使相关的文档落入分组中。注意，范围聚合的每个范围内包含 from 值但是排除 to 值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  "aggs": {\n    "age_range": {\n      "range": {\n        "field": "age",\n          "ranges": [{\n            "to": 25\n          },\n          {\n            "from": 25,\n            "to": 35\n          },\n          {\n            "from": 35\n          }]\n        },\n        "aggs": {\n          "bmax": {\n            "max": {\n              "field": "balance"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')])])]),t("p",[a._v("返回结果如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  ...\n  "aggregations": {\n    "age_range": {\n      "buckets": [{\n        "key": "*-25.0",\n        "to": 25,\n        "doc_count": 225,\n        "bmax": {\n          "value": 49587\n        }\n      },\n      {\n        "key": "25.0-35.0",\n        "from": 25,\n        "to": 35,\n        "doc_count": 485,\n        "bmax": {\n          "value": 49795\n        }\n      },\n      {\n        "key": "35.0-*",\n        "from": 35,\n        "doc_count": 290,\n        "bmax": {\n          "value": 49989\n        }\n      }]\n    }\n  }\n}\n')])])]),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.knowledgedict.com/tutorial/elasticsearch-intro.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Elasticsearch 教程"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);