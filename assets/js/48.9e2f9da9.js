(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{382:function(_,t,v){"use strict";v.r(t);var r=v(4),e=Object(r.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"redis-集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-集群"}},[_._v("#")]),_._v(" Redis 集群")]),_._v(" "),t("blockquote",[t("p",[t("strong",[t("a",{attrs:{href:"https://redis.io/topics/cluster-tutorial",target:"_blank",rel:"noopener noreferrer"}},[_._v("Redis 集群（Redis Cluster）"),t("OutboundLink")],1),_._v(" 是 Redis 官方提供的分布式数据库方案")]),_._v("。")]),_._v(" "),t("p",[_._v("既然是分布式，自然具备分布式系统的基本特性：可扩展、高可用、一致性。")]),_._v(" "),t("ul",[t("li",[_._v("Redis 集群通过划分 hash 槽来分区，进行数据分享。")]),_._v(" "),t("li",[_._v("Redis 集群采用主从模型，提供复制和故障转移功能，来保证 Redis 集群的高可用。")]),_._v(" "),t("li",[_._v("根据 CAP 理论，Consistency、Availability、Partition tolerance 三者不可兼得，而 Redis 集群的选择是 AP。Redis 集群节点间采用异步通信方式，不保证强一致性，尽力达到最终一致性。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200713100613.png",alt:"img"}})]),_._v(" "),t("h2",{attrs:{id:"_1-redis-cluster-分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-cluster-分区"}},[_._v("#")]),_._v(" 1. Redis Cluster 分区")]),_._v(" "),t("h3",{attrs:{id:"_1-1-集群节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-集群节点"}},[_._v("#")]),_._v(" 1.1. 集群节点")]),_._v(" "),t("p",[_._v("Redis 集群由多个节点组成，节点刚启动时，彼此是相互独立的。"),t("strong",[_._v("节点通过握手（ "),t("code",[_._v("CLUSTER MEET")]),_._v(" 命令）来将其他节点添加到自己所处的集群中")]),_._v("。")]),_._v(" "),t("p",[_._v("向一个节点发送 "),t("code",[_._v("CLUSTER MEET")]),_._v(" 命令，可以让当前节点与指定 IP、PORT 的节点进行握手，握手成功时，当前节点会将指定节点加入所在集群。")]),_._v(" "),t("p",[t("strong",[_._v("集群节点保存键值对以及过期时间的方式与单机 Redis 服务完全相同")]),_._v("。")]),_._v(" "),t("p",[_._v("Redis 集群节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。")]),_._v(" "),t("h3",{attrs:{id:"_1-2-分配-hash-槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-分配-hash-槽"}},[_._v("#")]),_._v(" 1.2. 分配 Hash 槽")]),_._v(" "),t("p",[_._v("分布式存储需要解决的首要问题是把 "),t("strong",[_._v("整个数据集")]),_._v(" 按照 "),t("strong",[_._v("分区规则")]),_._v(" 映射到 "),t("strong",[_._v("多个节点")]),_._v(" 的问题，即把 "),t("strong",[_._v("数据集")]),_._v(" 划分到 "),t("strong",[_._v("多个节点")]),_._v(" 上，每个节点负责 "),t("strong",[_._v("整体数据")]),_._v(" 的一个 "),t("strong",[_._v("子集")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("Redis 集群通过划分 hash 槽来将数据分区")]),_._v("。Redis 集群通过分区的方式来保存数据库的键值对："),t("strong",[_._v("集群的整个数据库被分为 16384 个哈希槽（slot）")]),_._v("，数据库中的每个键都属于这 16384 个槽的其中一个，集群中的每个节点可以处理 0 个或最多 16384 个槽。"),t("strong",[_._v("如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态")]),_._v("。")]),_._v(" "),t("p",[_._v("通过向节点发送 "),t("a",{attrs:{href:"https://redis.io/commands/cluster-addslots",target:"_blank",rel:"noopener noreferrer"}},[t("code",[_._v("CLUSTER ADDSLOTS")]),t("OutboundLink")],1),_._v(" 命令，可以将一个或多个槽指派给节点负责。")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("> CLUSTER ADDSLOTS 1 2 3\nOK\n")])])]),t("p",[_._v("集群中的每个节点负责一部分哈希槽，比如集群中有３个节点，则：")]),_._v(" "),t("ul",[t("li",[_._v("节点Ａ存储的哈希槽范围是：0 – 5500")]),_._v(" "),t("li",[_._v("节点Ｂ存储的哈希槽范围是：5501 – 11000")]),_._v(" "),t("li",[_._v("节点Ｃ存储的哈希槽范围是：11001 – 16384")])]),_._v(" "),t("h3",{attrs:{id:"_1-3-寻址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-寻址"}},[_._v("#")]),_._v(" 1.3. 寻址")]),_._v(" "),t("p",[_._v("当客户端向节点发送与数据库键有关的命令时，接受命令的节点会"),t("strong",[_._v("计算出命令要处理的数据库属于哪个槽")]),_._v("，并"),t("strong",[_._v("检查这个槽是否指派给了自己")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("如果键所在的槽正好指派给了当前节点，那么当前节点直接执行命令。")]),_._v(" "),t("li",[_._v("如果键所在的槽没有指派给当前节点，那么节点会向客户端返回一个 MOVED 错误，指引客户端重定向至正确的节点。")])]),_._v(" "),t("h4",{attrs:{id:"_1-3-1-计算键属于哪个槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-计算键属于哪个槽"}},[_._v("#")]),_._v(" 1.3.1. 计算键属于哪个槽")]),_._v(" "),t("p",[_._v("决定一个 key 应该分配到那个槽的算法是："),t("strong",[_._v("计算该 key 的 CRC16 结果再模 16834")]),_._v("。")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("HASH_SLOT = CRC16(KEY) mod 16384\n")])])]),t("p",[_._v("当节点计算出 key 所属的槽为 i 之后，节点会根据以下条件判断槽是否由自己负责：")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("clusterState.slots[i] == clusterState.myself\n")])])]),t("h4",{attrs:{id:"_1-3-2-moved-错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-moved-错误"}},[_._v("#")]),_._v(" 1.3.2. MOVED 错误")]),_._v(" "),t("p",[_._v("当节点发现键所在的槽并非自己负责处理的时候，节点就会向客户端返回一个 "),t("code",[_._v("MOVED")]),_._v(" 错误，指引客户端转向正在负责槽的节点。")]),_._v(" "),t("p",[t("code",[_._v("MOVED")]),_._v(" 错误的格式为：")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("MOVED <slot> <ip>:<port>\n")])])]),t("blockquote",[t("p",[_._v("个人理解：MOVED 这种操作有点类似 HTTP 协议中的重定向。")])]),_._v(" "),t("h3",{attrs:{id:"_1-4-重新分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-重新分区"}},[_._v("#")]),_._v(" 1.4. 重新分区")]),_._v(" "),t("p",[_._v("Redis 集群的"),t("strong",[_._v("重新分区操作可以将任意数量的已经指派给某个节点（源节点）的槽改为指派给另一个节点（目标节点），并且相关槽所属的键值对也会从源节点被移动到目标节点")]),_._v("。")]),_._v(" "),t("p",[_._v("重新分区操作"),t("strong",[_._v("可以在线进")]),_._v("行，在重新分区的过程中，集群不需要下线，并且源节点和目标节点都可以继续处理命令请求。")]),_._v(" "),t("p",[_._v("Redis 集群的重新分区操作由 Redis 集群管理软件 "),t("strong",[_._v("redis-trib")]),_._v(" 负责执行的，redis-trib 通过向源节点和目标节点发送命令来进行重新分区操作。")]),_._v(" "),t("p",[_._v("重新分区的实现原理如下图所示：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/redis/redis-cluster-trib.png",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_1-5-ask-错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-ask-错误"}},[_._v("#")]),_._v(" 1.5. ASK 错误")]),_._v(" "),t("p",[t("code",[_._v("ASK")]),_._v(" 错误与 "),t("code",[_._v("MOVED")]),_._v(" 的区别在于："),t("strong",[_._v("ASK 错误只是两个节点在迁移槽的过程中使用的一种临时措施")]),_._v("，在客户端收到关于槽 X 的 ASK 错误之后，客户端只会在接下来的一次命令请求中将关于槽 X 的命令请求发送至 ASK 错误所指示的节点，但这种转向不会对客户端今后发送关于槽 X 的命令请求产生任何影响，客户端仍然会将关于槽 X 的命令请求发送至目前负责处理槽 X 的节点，除非 ASK 错误再次出现。")]),_._v(" "),t("p",[_._v("判断 ASK 错误的过程如下图所示：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/redis/redis-ask.png",alt:"img"}})]),_._v(" "),t("h2",{attrs:{id:"_2-redis-cluster-故障转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis-cluster-故障转移"}},[_._v("#")]),_._v(" 2. Redis Cluster 故障转移")]),_._v(" "),t("h3",{attrs:{id:"_2-1-复制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-复制"}},[_._v("#")]),_._v(" 2.1. 复制")]),_._v(" "),t("p",[_._v("Redis 复制机制可以参考："),t("RouterLink",{attrs:{to:"/12.数据库/05.KV数据库/01.Redis/docs/05.KV数据库/01.Redis/05.Redis复制.html"}},[_._v("Redis 复制")])],1),_._v(" "),t("h3",{attrs:{id:"_2-2-故障检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-故障检测"}},[_._v("#")]),_._v(" 2.2. 故障检测")]),_._v(" "),t("p",[t("strong",[_._v("集群中每个节点都会定期向集群中的其他节点发送 PING 消息，以此来检测对方是否在线")]),_._v("。")]),_._v(" "),t("p",[_._v("节点的状态信息可以分为：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("在线状态；")])]),_._v(" "),t("li",[t("p",[_._v("下线状态（FAIL）;")])]),_._v(" "),t("li",[t("p",[_._v("疑似下线状态（PFAIL），即在规定的时间内，没有应答 PING 消息；")])])]),_._v(" "),t("h3",{attrs:{id:"_2-3-故障转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-故障转移"}},[_._v("#")]),_._v(" 2.3. 故障转移")]),_._v(" "),t("ol",[t("li",[_._v("下线主节点的所有从节点中，会有一个从节点被选中。")]),_._v(" "),t("li",[_._v("被选中的从节点会执行 "),t("code",[_._v("SLAVEOF no one")]),_._v(" 命令，成为新的主节点。")]),_._v(" "),t("li",[_._v("新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。")]),_._v(" "),t("li",[_._v("新的主节点向集群广播一条 PONG 消息，告知其他节点这个从节点已变成主节点。")])]),_._v(" "),t("h3",{attrs:{id:"_2-4-选举新的主节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-选举新的主节点"}},[_._v("#")]),_._v(" 2.4. 选举新的主节点")]),_._v(" "),t("p",[_._v("Redis 集群选举新的主节点流程基于"),t("a",{attrs:{href:"https://www.jianshu.com/p/8e4bbe7e276c",target:"_blank",rel:"noopener noreferrer"}},[_._v("共识算法：Raft"),t("OutboundLink")],1)]),_._v(" "),t("h2",{attrs:{id:"_3-redis-cluster-通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis-cluster-通信"}},[_._v("#")]),_._v(" 3. Redis Cluster 通信")]),_._v(" "),t("p",[_._v("集群中的节点通过发送和接收消息来进行通信。")]),_._v(" "),t("p",[_._v("Redis 集群节点发送的消息主要有以下五种：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("MEET")]),_._v(" - 请求接收方加入发送方所在的集群。")]),_._v(" "),t("li",[t("code",[_._v("PING")]),_._v(" - 集群中每个节点每隔一段时间（默认为一秒）从已知节点列表中随机选出五个节点，然后对这五个节点中最久没联系的节点发送 PING 消息，以此检测被选中的节点是否在线。")]),_._v(" "),t("li",[t("code",[_._v("PONG")]),_._v(" - 当接收方收到发送方发来的 MEET 消息或 PING 消息时，会返回一条 PONG 消息作为应答。")]),_._v(" "),t("li",[t("code",[_._v("FAIL")]),_._v(" - 当一个主节点 A 判断另一个主节点 B 已经进入 FAIL 状态时，节点 A 会向集群广播一条关于节点 B 的 FAIL 消息，所有收到这条消息的节点都会立即将节点 B 标记为已下线。")]),_._v(" "),t("li",[t("code",[_._v("PUBLISH")]),_._v(" - 当节点收到一个 PUBLISH 命令时，节点会执行这个命令，并向集群广播一条 PUBLISH 消息，所有接受到这条消息的节点都会执行相同的 PUBLISH 命令。")])]),_._v(" "),t("h2",{attrs:{id:"_4-redis-cluster-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis-cluster-应用"}},[_._v("#")]),_._v(" 4. Redis Cluster 应用")]),_._v(" "),t("h3",{attrs:{id:"_4-1-集群功能限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-集群功能限制"}},[_._v("#")]),_._v(" 4.1. 集群功能限制")]),_._v(" "),t("p",[_._v("Redis 集群相对 "),t("strong",[_._v("单机")]),_._v("，存在一些功能限制，需要 "),t("strong",[_._v("开发人员")]),_._v(" 提前了解，在使用时做好规避。")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("key")]),_._v(" "),t("strong",[_._v("批量操作")]),_._v(" 支持有限：类似 "),t("code",[_._v("mset")]),_._v("、"),t("code",[_._v("mget")]),_._v(" 操作，目前只支持对具有相同 "),t("code",[_._v("slot")]),_._v(" 值的 "),t("code",[_._v("key")]),_._v(" 执行 "),t("strong",[_._v("批量操作")]),_._v("。对于 "),t("strong",[_._v("映射为不同")]),_._v(" "),t("code",[_._v("slot")]),_._v(" 值的 "),t("code",[_._v("key")]),_._v(" 由于执行 "),t("code",[_._v("mget")]),_._v("、"),t("code",[_._v("mget")]),_._v(" 等操作可能存在于多个节点上，因此不被支持。")])]),_._v(" "),t("li",[t("p",[t("code",[_._v("key")]),_._v(" "),t("strong",[_._v("事务操作")]),_._v(" 支持有限：只支持 "),t("strong",[_._v("多")]),_._v(" "),t("code",[_._v("key")]),_._v(" 在 "),t("strong",[_._v("同一节点上")]),_._v(" 的 "),t("strong",[_._v("事务操作")]),_._v("，当多个 "),t("code",[_._v("key")]),_._v(" 分布在 "),t("strong",[_._v("不同")]),_._v(" 的节点上时 "),t("strong",[_._v("无法")]),_._v(" 使用事务功能。")])]),_._v(" "),t("li",[t("p",[t("code",[_._v("key")]),_._v(" 作为 "),t("strong",[_._v("数据分区")]),_._v(" 的最小粒度，不能将一个 "),t("strong",[_._v("大的键值")]),_._v(" 对象如 "),t("code",[_._v("hash")]),_._v("、"),t("code",[_._v("list")]),_._v(" 等映射到 "),t("strong",[_._v("不同的节点")]),_._v("。")])]),_._v(" "),t("li",[t("p",[_._v("不支持 "),t("strong",[_._v("多数据库空间")]),_._v("："),t("strong",[_._v("单机")]),_._v(" 下的 Redis 可以支持 "),t("code",[_._v("16")]),_._v(" 个数据库（"),t("code",[_._v("db0 ~ db15")]),_._v("），"),t("strong",[_._v("集群模式")]),_._v(" 下只能使用 "),t("strong",[_._v("一个")]),_._v(" 数据库空间，即 "),t("code",[_._v("db0")]),_._v("。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("复制结构")]),_._v(" 只支持一层："),t("strong",[_._v("从节点")]),_._v(" 只能复制 "),t("strong",[_._v("主节点")]),_._v("，不支持 "),t("strong",[_._v("嵌套树状复制")]),_._v(" 结构。")])])]),_._v(" "),t("h3",{attrs:{id:"_4-2-集群规模限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-集群规模限制"}},[_._v("#")]),_._v(" 4.2. 集群规模限制")]),_._v(" "),t("p",[_._v("Redis Cluster 的优点是易于使用。分区、主从复制、弹性扩容这些功能都可以做到自动化，通过简单的部署就可以获得一个大容量、高可靠、高可用的 Redis 集群，并且对于应用来说，近乎于是透明的。")]),_._v(" "),t("p",[_._v("所以，"),t("strong",[_._v("Redis Cluster 非常适合构建中小规模 Redis 集群")]),_._v("，这里的中小规模指的是，大概几个到几十个节点这样规模的 Redis 集群。")]),_._v(" "),t("p",[_._v("但是 Redis Cluster 不太适合构建超大规模集群，主要原因是，它采用了去中心化的设计。")]),_._v(" "),t("p",[_._v("Redis 的每个节点上，都保存了所有槽和节点的映射关系表，客户端可以访问任意一个节点，再通过重定向命令，找到数据所在的那个节点。那么，这个映射关系表是如何更新的呢？Redis Cluster 采用了一种去中心化的流言 (Gossip) 协议来传播集群配置的变化。")]),_._v(" "),t("p",[_._v("Gossip 协议的优点是去中心化；缺点是传播速度慢，并且是集群规模越大，传播的越慢。")]),_._v(" "),t("h3",{attrs:{id:"_4-3-集群配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-集群配置"}},[_._v("#")]),_._v(" 4.3. 集群配置")]),_._v(" "),t("p",[_._v("我们后面会部署一个 Redis 集群作为例子，在那之前，先介绍一下集群在 redis.conf 中的参数。")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("cluster-enabled")]),_._v(" "),t("code",[_._v("<yes/no>")]),_._v(" - 如果配置”yes”则开启集群功能，此 redis 实例作为集群的一个节点，否则，它是一个普通的单一的 redis 实例。")]),_._v(" "),t("li",[t("strong",[_._v("cluster-config-file")]),_._v(" "),t("code",[_._v("<filename>")]),_._v(" - 注意：虽然此配置的名字叫“集群配置文件”，但是此配置文件不能人工编辑，它是集群节点自动维护的文件，主要用于记录集群中有哪些节点、他们的状态以及一些持久化参数等，方便在重启时恢复这些状态。通常是在收到请求之后这个文件就会被更新。")]),_._v(" "),t("li",[t("strong",[_._v("cluster-node-timeout")]),_._v(" "),t("code",[_._v("<milliseconds>")]),_._v(" - 这是集群中的节点能够失联的最大时间，超过这个时间，该节点就会被认为故障。如果主节点超过这个时间还是不可达，则用它的从节点将启动故障迁移，升级成主节点。注意，任何一个节点在这个时间之内如果还是没有连上大部分的主节点，则此节点将停止接收任何请求。")]),_._v(" "),t("li",[t("strong",[_._v("cluster-slave-validity-factor")]),_._v(" "),t("code",[_._v("<factor>")]),_._v(" - 如果设置成０，则无论从节点与主节点失联多久，从节点都会尝试升级成主节点。如果设置成正数，则 cluster-node-timeout 乘以 cluster-slave-validity-factor 得到的时间，是从节点与主节点失联后，此从节点数据有效的最长时间，超过这个时间，从节点不会启动故障迁移。假设 cluster-node-timeout=5，cluster-slave-validity-factor=10，则如果从节点跟主节点失联超过 50 秒，此从节点不能成为主节点。注意，如果此参数配置为非 0，将可能出现由于某主节点失联却没有从节点能顶上的情况，从而导致集群不能正常工作，在这种情况下，只有等到原来的主节点重新回归到集群，集群才恢复运作。")]),_._v(" "),t("li",[t("strong",[_._v("cluster-migration-barrier")]),_._v(" "),t("code",[_._v("<count>")]),_._v(" - 主节点需要的最小从节点数，只有达到这个数，主节点失败时，它从节点才会进行迁移。更详细介绍可以看本教程后面关于副本迁移到部分。")]),_._v(" "),t("li",[t("strong",[_._v("cluster-require-full-coverage")]),_._v(" "),t("code",[_._v("<yes/no>")]),_._v(" - 在部分 key 所在的节点不可用时，如果此参数设置为”yes”(默认值), 则整个集群停止接受操作；如果此参数设置为”no”，则集群依然为可达节点上的 key 提供读操作。")])]),_._v(" "),t("h2",{attrs:{id:"_5-其他-redis-集群方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-其他-redis-集群方案"}},[_._v("#")]),_._v(" 5. 其他 Redis 集群方案")]),_._v(" "),t("p",[_._v("Redis Cluster 不太适合用于大规模集群，所以，如果要构建超大 Redis 集群，需要选择替代方案。一般有三种方案类型：")]),_._v(" "),t("ul",[t("li",[_._v("客户端分区方案")]),_._v(" "),t("li",[_._v("代理分区方案")]),_._v(" "),t("li",[_._v("查询路由方案")])]),_._v(" "),t("h3",{attrs:{id:"_5-1-客户端分区方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-客户端分区方案"}},[_._v("#")]),_._v(" 5.1. 客户端分区方案")]),_._v(" "),t("p",[t("strong",[_._v("客户端")]),_._v(" 就已经决定数据会被 "),t("strong",[_._v("存储")]),_._v(" 到哪个 Redis 节点或者从哪个 Redis 节点 "),t("strong",[_._v("读取数据")]),_._v("。其主要思想是采用 "),t("strong",[_._v("哈希算法")]),_._v(" 将 Redis 数据的 "),t("code",[_._v("key")]),_._v(" 进行散列，通过 "),t("code",[_._v("hash")]),_._v(" 函数，特定的 "),t("code",[_._v("key")]),_._v("会 "),t("strong",[_._v("映射")]),_._v(" 到特定的 Redis 节点上。")]),_._v(" "),t("p",[t("strong",[_._v("客户端分区方案")]),_._v(" 的代表为 Redis Sharding，Redis Sharding 是 Redis Cluster 出来之前，业界普遍使用的 Redis "),t("strong",[_._v("多实例集群")]),_._v(" 方法。Java 的 Redis 客户端驱动库 "),t("a",{attrs:{href:"https://github.com/redis/jedis",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[_._v("Jedis")]),t("OutboundLink")],1),_._v("，支持 Redis Sharding 功能，即 ShardedJedis 以及 "),t("strong",[_._v("结合缓存池")]),_._v(" 的 ShardedJedisPool。")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("优点")]),_._v("：不使用 "),t("strong",[_._v("第三方中间件")]),_._v("，"),t("strong",[_._v("分区逻辑")]),_._v(" 可控，"),t("strong",[_._v("配置")]),_._v(" 简单，节点之间无关联，容易 "),t("strong",[_._v("线性扩展")]),_._v("，灵活性强。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("缺点")]),_._v("："),t("strong",[_._v("客户端")]),_._v(" 无法 "),t("strong",[_._v("动态增删")]),_._v(" 服务节点，客户端需要自行维护 "),t("strong",[_._v("分发逻辑")]),_._v("，客户端之间 "),t("strong",[_._v("无连接共享")]),_._v("，会造成 "),t("strong",[_._v("连接浪费")]),_._v("。")])])]),_._v(" "),t("h3",{attrs:{id:"_5-2-代理分区方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-代理分区方案"}},[_._v("#")]),_._v(" 5.2. 代理分区方案")]),_._v(" "),t("p",[t("strong",[_._v("客户端")]),_._v(" 发送请求到一个 "),t("strong",[_._v("代理组件")]),_._v("，"),t("strong",[_._v("代理")]),_._v(" 解析 "),t("strong",[_._v("客户端")]),_._v(" 的数据，并将请求转发至正确的节点，最后将结果回复给客户端。")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("优点")]),_._v("：简化 "),t("strong",[_._v("客户端")]),_._v(" 的分布式逻辑，"),t("strong",[_._v("客户端")]),_._v(" 透明接入，切换成本低，代理的 "),t("strong",[_._v("转发")]),_._v(" 和 "),t("strong",[_._v("存储")]),_._v(" 分离。")]),_._v(" "),t("li",[t("strong",[_._v("缺点")]),_._v("：多了一层 "),t("strong",[_._v("代理层")]),_._v("，加重了 "),t("strong",[_._v("架构部署复杂度")]),_._v(" 和 "),t("strong",[_._v("性能损耗")]),_._v("。")])]),_._v(" "),t("p",[t("strong",[_._v("代理分区")]),_._v(" 主流实现的有方案有 "),t("strong",[t("a",{attrs:{href:"https://github.com/twitter/twemproxy",target:"_blank",rel:"noopener noreferrer"}},[_._v("Twemproxy"),t("OutboundLink")],1)]),_._v(" 和 "),t("a",{attrs:{href:"https://github.com/CodisLabs/codis",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[_._v("Codis")]),t("OutboundLink")],1),_._v("。")]),_._v(" "),t("h4",{attrs:{id:"_5-2-1-twemproxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-twemproxy"}},[_._v("#")]),_._v(" 5.2.1. Twemproxy")]),_._v(" "),t("p",[t("strong",[t("a",{attrs:{href:"https://github.com/twitter/twemproxy",target:"_blank",rel:"noopener noreferrer"}},[_._v("Twemproxy"),t("OutboundLink")],1)]),_._v(" 也叫 "),t("code",[_._v("nutcraker")]),_._v("，是 Twitter 开源的一个 Redis 和 Memcache 的 "),t("strong",[_._v("中间代理服务器")]),_._v(" 程序。")]),_._v(" "),t("p",[t("strong",[t("a",{attrs:{href:"https://github.com/twitter/twemproxy",target:"_blank",rel:"noopener noreferrer"}},[_._v("Twemproxy"),t("OutboundLink")],1)]),_._v(" 作为 "),t("strong",[_._v("代理")]),_._v("，可接受来自多个程序的访问，按照 "),t("strong",[_._v("路由规则")]),_._v("，转发给后台的各个 Redis 服务器，再原路返回。"),t("strong",[t("a",{attrs:{href:"https://github.com/twitter/twemproxy",target:"_blank",rel:"noopener noreferrer"}},[_._v("Twemproxy"),t("OutboundLink")],1)]),_._v(" 存在 "),t("strong",[_._v("单点故障")]),_._v(" 问题，需要结合 Lvs 和 Keepalived 做 "),t("strong",[_._v("高可用方案")]),_._v("。")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("优点")]),_._v("：应用范围广，稳定性较高，中间代理层 "),t("strong",[_._v("高可用")]),_._v("。")]),_._v(" "),t("li",[t("strong",[_._v("缺点")]),_._v("：无法平滑地 "),t("strong",[_._v("水平扩容/缩容")]),_._v("，无 "),t("strong",[_._v("可视化管理界面")]),_._v("，运维不友好，出现故障，不能 "),t("strong",[_._v("自动转移")]),_._v("。")])]),_._v(" "),t("h4",{attrs:{id:"_5-2-2-codis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-codis"}},[_._v("#")]),_._v(" 5.2.2. Codis")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/CodisLabs/codis",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[_._v("Codis")]),t("OutboundLink")],1),_._v(" 是一个 "),t("strong",[_._v("分布式")]),_._v(" Redis 解决方案，对于上层应用来说，连接 Codis-Proxy 和直接连接 "),t("strong",[_._v("原生的")]),_._v(" Redis-Server 没有的区别。"),t("a",{attrs:{href:"https://github.com/CodisLabs/codis",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[_._v("Codis")]),t("OutboundLink")],1),_._v(" 底层会 "),t("strong",[_._v("处理请求的转发")]),_._v("，不停机的进行 "),t("strong",[_._v("数据迁移")]),_._v(" 等工作。"),t("a",{attrs:{href:"https://github.com/CodisLabs/codis",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[_._v("Codis")]),t("OutboundLink")],1),_._v(" 采用了无状态的 "),t("strong",[_._v("代理层")]),_._v("，对于 "),t("strong",[_._v("客户端")]),_._v(" 来说，一切都是透明的。")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("优点")]),_._v("：实现了上层 Proxy 和底层 Redis 的 "),t("strong",[_._v("高可用")]),_._v("，"),t("strong",[_._v("数据分区")]),_._v(" 和 "),t("strong",[_._v("自动平衡")]),_._v("，提供 "),t("strong",[_._v("命令行接口")]),_._v(" 和 RESTful API，提供 "),t("strong",[_._v("监控")]),_._v(" 和 "),t("strong",[_._v("管理")]),_._v(" 界面，可以动态 "),t("strong",[_._v("添加")]),_._v(" 和 "),t("strong",[_._v("删除")]),_._v(" Redis 节点。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("缺点")]),_._v("："),t("strong",[_._v("部署架构")]),_._v(" 和 "),t("strong",[_._v("配置")]),_._v(" 复杂，不支持 "),t("strong",[_._v("跨机房")]),_._v(" 和 "),t("strong",[_._v("多租户")]),_._v("，不支持 "),t("strong",[_._v("鉴权管理")]),_._v("。")])])]),_._v(" "),t("h3",{attrs:{id:"_5-3-查询路由方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-查询路由方案"}},[_._v("#")]),_._v(" 5.3. 查询路由方案")]),_._v(" "),t("p",[t("strong",[_._v("客户端随机地")]),_._v(" 请求任意一个 Redis 实例，然后由 Redis 将请求 "),t("strong",[_._v("转发")]),_._v(" 给 "),t("strong",[_._v("正确")]),_._v(" 的 Redis 节点。Redis Cluster 实现了一种 "),t("strong",[_._v("混合形式")]),_._v(" 的 "),t("strong",[_._v("查询路由")]),_._v("，但并不是 "),t("strong",[_._v("直接")]),_._v(" 将请求从一个 Redis 节点 "),t("strong",[_._v("转发")]),_._v(" 到另一个 Redis 节点，而是在 "),t("strong",[_._v("客户端")]),_._v(" 的帮助下直接 "),t("strong",[_._v("重定向")]),_._v("（ "),t("code",[_._v("redirected")]),_._v("）到正确的 Redis 节点。")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("优点")]),_._v("："),t("strong",[_._v("去中心化")]),_._v("，数据按照 "),t("strong",[_._v("槽")]),_._v(" 存储分布在多个 Redis 实例上，可以平滑的进行节点 "),t("strong",[_._v("扩容/缩容")]),_._v("，支持 "),t("strong",[_._v("高可用")]),_._v(" 和 "),t("strong",[_._v("自动故障转移")]),_._v("，运维成本低。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("缺点")]),_._v("：重度依赖 Redis-trib 工具，缺乏 "),t("strong",[_._v("监控管理")]),_._v("，需要依赖 Smart Client ("),t("strong",[_._v("维护连接")]),_._v("，"),t("strong",[_._v("缓存路由表")]),_._v("，"),t("code",[_._v("MultiOp")]),_._v(" 和 "),t("code",[_._v("Pipeline")]),_._v(" 支持)。Failover 节点的 "),t("strong",[_._v("检测过慢")]),_._v("，不如有 "),t("strong",[_._v("中心节点")]),_._v(" 的集群及时（如 ZooKeeper）。Gossip 消息采用广播方式，集群规模越大，开销越大。无法根据统计区分 "),t("strong",[_._v("冷热数据")]),_._v("。")])])]),_._v(" "),t("h2",{attrs:{id:"_6-参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-参考资料"}},[_._v("#")]),_._v(" 6. 参考资料")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("官网")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Redis 官网"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/antirez/redis",target:"_blank",rel:"noopener noreferrer"}},[_._v("Redis github"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"http://redis.cn/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Redis 官方文档中文版"),t("OutboundLink")],1)])])]),_._v(" "),t("li",[t("strong",[_._v("中间件")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/twitter/twemproxy",target:"_blank",rel:"noopener noreferrer"}},[_._v("Twemproxy"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/CodisLabs/codis",target:"_blank",rel:"noopener noreferrer"}},[_._v("Codis"),t("OutboundLink")],1)])])]),_._v(" "),t("li",[t("strong",[_._v("书籍")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://item.jd.com/11791607.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("《Redis 实战》"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://item.jd.com/11486101.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("《Redis 设计与实现》"),t("OutboundLink")],1)])])]),_._v(" "),t("li",[t("strong",[_._v("教程")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/intro/100046801",target:"_blank",rel:"noopener noreferrer"}},[_._v("后端存储实战课"),t("OutboundLink")],1)])])]),_._v(" "),t("li",[t("strong",[_._v("文章")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://ifeve.com/redis-cluster-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Redis 集群教程"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/c869feb5581d",target:"_blank",rel:"noopener noreferrer"}},[_._v("Redis 集群的原理和搭建"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5b8fc5536fb9a05d2d01fb11",target:"_blank",rel:"noopener noreferrer"}},[_._v("深入剖析 Redis 系列(三) - Redis 集群模式搭建与原理详解"),t("OutboundLink")],1)])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);