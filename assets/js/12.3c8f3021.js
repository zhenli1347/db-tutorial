(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{346:function(t,a,e){"use strict";e.r(a);var _=e(4),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"关系型数据库面试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库面试"}},[t._v("#")]),t._v(" 关系型数据库面试")]),t._v(" "),a("h2",{attrs:{id:"一、索引和约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、索引和约束"}},[t._v("#")]),t._v(" 一、索引和约束")]),t._v(" "),a("h3",{attrs:{id:"什么是索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是索引"}},[t._v("#")]),t._v(" 什么是索引")]),t._v(" "),a("p",[t._v("索引是对数据库表中一或多个列的值进行排序的结构，是帮助数据库高效查询数据的数据结构。")]),t._v(" "),a("h3",{attrs:{id:"索引的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的优缺点"}},[t._v("#")]),t._v(" 索引的优缺点")]),t._v(" "),a("p",[t._v("✔ 索引的优点：")]),t._v(" "),a("ul",[a("li",[t._v("索引大大减少了服务器需要扫描的数据量，从而加快检索速度。")]),t._v(" "),a("li",[t._v("支持行级锁的数据库，如 InnoDB 会在访问行的时候加锁。使用索引可以减少访问的行数，从而减少锁的竞争，提高并发。")]),t._v(" "),a("li",[t._v("索引可以帮助服务器避免排序和临时表。")]),t._v(" "),a("li",[t._v("索引可以将随机 I/O 变为顺序 I/O。")]),t._v(" "),a("li",[t._v("唯一索引可以确保每一行数据的唯一性，通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能。")])]),t._v(" "),a("p",[t._v("❌ 索引的缺点：")]),t._v(" "),a("ul",[a("li",[t._v("创建和维护索引要耗费时间，这会随着数据量的增加而增加。")]),t._v(" "),a("li",[a("strong",[t._v("索引需要占用额外的物理空间")]),t._v("，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立组合索引那么需要的空间就会更大。")]),t._v(" "),a("li",[t._v("写操作（"),a("code",[t._v("INSERT")]),t._v("/"),a("code",[t._v("UPDATE")]),t._v("/"),a("code",[t._v("DELETE")]),t._v("）时很可能需要更新索引，导致数据库的写操作性能降低。")])]),t._v(" "),a("h3",{attrs:{id:"何时使用索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何时使用索引"}},[t._v("#")]),t._v(" 何时使用索引")]),t._v(" "),a("p",[t._v("索引能够轻易将查询性能提升几个数量级。")]),t._v(" "),a("p",[t._v("✔ 什么情况"),a("strong",[t._v("适用")]),t._v("索引：")]),t._v(" "),a("ul",[a("li",[t._v("表经常进行 "),a("code",[t._v("SELECT")]),t._v(" 操作；")]),t._v(" "),a("li",[t._v("表的数据量比较大；")]),t._v(" "),a("li",[t._v("列名经常出现在 "),a("code",[t._v("WHERE")]),t._v(" 或连接（"),a("code",[t._v("JOIN")]),t._v("）条件中")])]),t._v(" "),a("p",[t._v("❌ 什么情况"),a("strong",[t._v("不适用")]),t._v("索引：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("频繁写操作")]),t._v("（ "),a("code",[t._v("INSERT")]),t._v("/"),a("code",[t._v("UPDATE")]),t._v("/"),a("code",[t._v("DELETE")]),t._v(" ）- 需要更新索引空间；")]),t._v(" "),a("li",[a("strong",[t._v("非常小的表")]),t._v(" - 对于非常小的表，大部分情况下简单的全表扫描更高效。")]),t._v(" "),a("li",[t._v("列名不经常出现在 "),a("code",[t._v("WHERE")]),t._v(" 或连接（"),a("code",[t._v("JOIN")]),t._v("）条件中 - 索引就会经常不命中，没有意义，还增加空间开销。")]),t._v(" "),a("li",[t._v("对于特大型表，建立和使用索引的代价将随之增长。可以考虑使用分区技术或 Nosql。")])]),t._v(" "),a("h3",{attrs:{id:"索引的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的类型"}},[t._v("#")]),t._v(" 索引的类型")]),t._v(" "),a("p",[t._v("主流的关系型数据库一般都支持以下索引类型：")]),t._v(" "),a("p",[t._v("从逻辑类型上划分（即一般创建表时设置的索引类型）：")]),t._v(" "),a("ul",[a("li",[t._v("唯一索引（"),a("code",[t._v("UNIQUE")]),t._v("）：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。")]),t._v(" "),a("li",[t._v("主键索引（"),a("code",[t._v("PRIMARY")]),t._v("）：一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引。")]),t._v(" "),a("li",[t._v("普通索引（"),a("code",[t._v("INDEX")]),t._v("）：最基本的索引，没有任何限制。")]),t._v(" "),a("li",[t._v("组合索引：多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。")])]),t._v(" "),a("p",[t._v("从物理存储上划分：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("聚集索引")]),t._v("("),a("code",[t._v("Clustered")]),t._v(")：表中各行的物理顺序与键值的逻辑（索引）顺序相同，每个表只能有一个。")]),t._v(" "),a("li",[a("strong",[t._v("非聚集索引")]),t._v("("),a("code",[t._v("Non-clustered")]),t._v(")：非聚集索引指定表的逻辑顺序，也可以视为二级索引。数据存储在一个位置，索引存储在另一个位置，索引中包含指向数据存储位置的指针。可以有多个，小于 249 个。")])]),t._v(" "),a("h3",{attrs:{id:"索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构"}},[t._v("#")]),t._v(" 索引的数据结构")]),t._v(" "),a("p",[t._v("主流数据库的索引一般使用的数据结构为：B 树、B+ 树。")]),t._v(" "),a("h4",{attrs:{id:"b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[t._v("#")]),t._v(" B 树")]),t._v(" "),a("p",[t._v("一棵 M 阶的 B-Tree 满足以下条件：")]),t._v(" "),a("ul",[a("li",[t._v("每个结点至多有 M 个孩子；")]),t._v(" "),a("li",[t._v("除根结点和叶结点外，其它每个结点至少有 M/2 个孩子；")]),t._v(" "),a("li",[t._v("根结点至少有两个孩子（除非该树仅包含一个结点）；")]),t._v(" "),a("li",[t._v("所有叶结点在同一层，叶结点不包含任何关键字信息；")]),t._v(" "),a("li",[t._v("有 K 个关键字的非叶结点恰好包含 K+1 个孩子；")])]),t._v(" "),a("p",[t._v("对于任意结点，其内部的关键字 Key 是升序排列的。每个节点中都包含了 data。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/B-TREE.png"}})]),t._v(" "),a("p",[t._v("对于每个结点，主要包含一个关键字数组 "),a("code",[t._v("Key[]")]),t._v("，一个指针数组（指向儿子）"),a("code",[t._v("Son[]")]),t._v("。")]),t._v(" "),a("p",[t._v("在 B-Tree 内，查找的流程是：")]),t._v(" "),a("ol",[a("li",[t._v("使用顺序查找（数组长度较短时）或折半查找方法查找 Key[] 数组，若找到关键字 K，则返回该结点的地址及 K 在 Key[] 中的位置；")]),t._v(" "),a("li",[t._v("否则，可确定 K 在某个 Key[i] 和 Key[i+1] 之间，则从 Son[i] 所指的子结点继续查找，直到在某结点中查找成功；")]),t._v(" "),a("li",[t._v("或直至找到叶结点且叶结点中的查找仍不成功时，查找过程失败。")])]),t._v(" "),a("h4",{attrs:{id:"b-树-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树-2"}},[t._v("#")]),t._v(" B+ 树")]),t._v(" "),a("p",[t._v("B+Tree 是 B-Tree 的变种：")]),t._v(" "),a("ul",[a("li",[t._v("每个节点的指针上限为 2d 而不是 2d+1（d 为节点的出度）。")]),t._v(" "),a("li",[t._v("非叶子节点不存储 data，只存储 key；叶子节点不存储指针。")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/B+TREE.png"}})]),t._v(" "),a("p",[t._v("由于并不是所有节点都具有相同的域，因此 B+Tree 中叶节点和内节点一般大小不同。这点与 B-Tree 不同，虽然 B-Tree 中不同节点存放的 key 和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现中 B-Tree 往往对每个节点申请同等大小的空间。")]),t._v(" "),a("p",[a("strong",[t._v("带有顺序访问指针的 B+Tree")])]),t._v(" "),a("p",[t._v("一般在数据库系统或文件系统中使用的 B+Tree 结构都在经典 B+Tree 的基础上进行了优化，增加了顺序访问指针。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/带有顺序访问指针的B+Tree.png"}})]),t._v(" "),a("p",[t._v("在 B+Tree 的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的 B+Tree。")]),t._v(" "),a("p",[t._v("这个优化的目的是为了提高区间访问的性能，例如上图中如果要查询 key 为从 18 到 49 的所有数据记录，当找到 18 后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。")]),t._v(" "),a("h4",{attrs:{id:"b-树-vs-b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树-vs-b-树"}},[t._v("#")]),t._v(" B 树 vs. B+ 树")]),t._v(" "),a("ul",[a("li",[t._v("B+ 树更适合外部存储(一般指磁盘存储)，由于内节点(非叶子节点)不存储 data，所以一个节点可以存储更多的内节点，每个节点能索引的范围更大更精确。也就是说使用 B+ 树单次磁盘 IO 的信息量相比较 B 树更大，IO 效率更高。")]),t._v(" "),a("li",[t._v("Mysql 是关系型数据库，经常会按照区间来访问某个索引列，B+ 树的叶子节点间按顺序建立了链指针，加强了区间访问性，所以 B+ 树对索引列上的区间范围查询很友好。而 B 树每个节点的 key 和 data 在一起，无法进行区间查找。")])]),t._v(" "),a("h4",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),a("blockquote",[a("p",[t._v("Hash 索引只有精确匹配索引所有列的查询才有效。")])]),t._v(" "),a("p",[t._v("对于每一行数据，对所有的索引列计算一个 "),a("code",[t._v("hashcode")]),t._v("。哈希索引将所有的 "),a("code",[t._v("hashcode")]),t._v(" 存储在索引中，同时在 Hash 表中保存指向每个数据行的指针。")]),t._v(" "),a("p",[t._v("哈希结构索引的优点：")]),t._v(" "),a("ul",[a("li",[t._v("因为索引数据结构紧凑，所以查询速度非常快。")])]),t._v(" "),a("p",[t._v("哈希结构索引的缺点：")]),t._v(" "),a("ul",[a("li",[t._v("哈希索引数据不是按照索引值顺序存储的，所以无法用于排序。")]),t._v(" "),a("li",[t._v("哈希索引不支持部分索引匹配查找。如，在数据列 (A,B) 上建立哈希索引，如果查询只有数据列 A，无法使用该索引。")]),t._v(" "),a("li",[t._v("哈希索引只支持等值比较查询，不支持任何范围查询，如 WHERE price > 100。")]),t._v(" "),a("li",[t._v("哈希索引有可能出现哈希冲突，出现哈希冲突时，必须遍历链表中所有的行指针，逐行比较，直到找到符合条件的行。")])]),t._v(" "),a("h3",{attrs:{id:"索引策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引策略"}},[t._v("#")]),t._v(" 索引策略")]),t._v(" "),a("h4",{attrs:{id:"索引基本原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引基本原则"}},[t._v("#")]),t._v(" 索引基本原则")]),t._v(" "),a("ul",[a("li",[t._v("索引不是越多越好，不要为所有列都创建索引。")]),t._v(" "),a("li",[t._v("要尽量避免冗余和重复索引；")]),t._v(" "),a("li",[t._v("要考虑删除未使用的索引；")]),t._v(" "),a("li",[t._v("尽量的扩展索引，不要新建索引；")]),t._v(" "),a("li",[t._v("频繁作为 "),a("code",[t._v("WHERE")]),t._v(" 过滤条件的列应该考虑添加索引")])]),t._v(" "),a("h4",{attrs:{id:"独立的列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#独立的列"}},[t._v("#")]),t._v(" 独立的列")]),t._v(" "),a("p",[a("strong",[t._v("如果查询中的列不是独立的列，则数据库不会使用索引")]),t._v("。")]),t._v(" "),a("p",[t._v("“独立的列” 是指索引列不能是表达式的一部分，也不能是函数的参数。")]),t._v(" "),a("p",[t._v("❌ 错误示例：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" actor_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" actor_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" TO_DAYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("current_date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" TO_DAYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date_col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"前缀索引和索引选择性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前缀索引和索引选择性"}},[t._v("#")]),t._v(" 前缀索引和索引选择性")]),t._v(" "),a("p",[t._v("有时候需要索引很长的字符列，这会让索引变得大且慢。")]),t._v(" "),a("p",[t._v("解决方法是：可以索引开始的部分字符，这样可以大大节约索引空间，从而提高索引效率。但这样也会降低索引的选择性。")]),t._v(" "),a("p",[t._v("索引的选择性是指：不重复的索引值和数据表记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，查询效率也越高。")]),t._v(" "),a("p",[t._v("对于 BLOB/TEXT/VARCHAR 这种文本类型的列，必须使用前缀索引，因为数据库往往不允许索引这些列的完整长度。")]),t._v(" "),a("p",[t._v("要选择足够长的前缀以保证较高的选择性，同时又不能太长（节约空间）。")]),t._v(" "),a("p",[t._v("❌ 低效示例：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" sakila"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("✔ 高效示例：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" cnt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" pref "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" sakila"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("city_demo\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"多列索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多列索引"}},[t._v("#")]),t._v(" 多列索引")]),t._v(" "),a("p",[a("strong",[t._v("不要为每个列都创建独立索引")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("将选择性高的列或基数大的列优先排在多列索引最前列")]),t._v("。但有时，也需要考虑 WHERE 子句中的排序、分组和范围条件等因素，这些因素也会对查询性能造成较大影响。")]),t._v(" "),a("p",[t._v("举例来说，有一张 user 表，其中含 name, sex, age 三个列，如果将这三者组合为多列索引，应该用什么样的顺序呢？从选择性高的角度来看："),a("code",[t._v("name > age > sex")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"聚簇索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引"}},[t._v("#")]),t._v(" 聚簇索引")]),t._v(" "),a("p",[t._v("聚簇索引不是一种单独的索引类型，而是一种数据存储方式。具体细节依赖于实现方式。如 "),a("strong",[t._v("InnoDB 的聚簇索引实际是在同一个结构中保存了 B 树的索引和数据行")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("聚簇表示数据行和相邻的键值紧凑地存储在一起，因为数据紧凑，所以访问快")]),t._v("。因为无法同时把数据行存放在两个不同的地方，所以"),a("strong",[t._v("一个表只能有一个聚簇索引")]),t._v("。")]),t._v(" "),a("p",[t._v("若没有定义主键，InnoDB 会隐式定义一个主键来作为聚簇索引。")]),t._v(" "),a("h4",{attrs:{id:"覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[t._v("#")]),t._v(" 覆盖索引")]),t._v(" "),a("p",[t._v("索引包含所有需要查询的字段的值。")]),t._v(" "),a("p",[t._v("具有以下优点：")]),t._v(" "),a("ul",[a("li",[t._v("因为索引条目通常远小于数据行的大小，所以若只读取索引，能大大减少数据访问量。")]),t._v(" "),a("li",[t._v("一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。")]),t._v(" "),a("li",[t._v("对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。")])]),t._v(" "),a("h4",{attrs:{id:"使用索引扫描来做排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用索引扫描来做排序"}},[t._v("#")]),t._v(" 使用索引扫描来做排序")]),t._v(" "),a("p",[t._v("Mysql 有两种方式可以生成排序结果：通过排序操作；或者按索引顺序扫描。")]),t._v(" "),a("p",[a("strong",[t._v("索引最好既满足排序，又用于查找行")]),t._v("。这样，就可以使用索引来对结果排序。")]),t._v(" "),a("h4",{attrs:{id:"最左前缀匹配原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀匹配原则"}},[t._v("#")]),t._v(" 最左前缀匹配原则")]),t._v(" "),a("p",[t._v("MySQL 会一直向右匹配直到遇到范围查询 "),a("code",[t._v("(>,<,BETWEEN,LIKE)")]),t._v(" 就停止匹配。")]),t._v(" "),a("ul",[a("li",[t._v("索引可以简单如一个列(a)，也可以复杂如多个列(a, b, c, d)，即"),a("strong",[t._v("联合索引")]),t._v("。")]),t._v(" "),a("li",[t._v("如果是联合索引，那么 key 也由多个列组成，同时，索引只能用于查找 key 是否"),a("strong",[t._v("存在（相等）")]),t._v("，遇到范围查询(>、<、between、like 左匹配)等就"),a("strong",[t._v("不能进一步匹配")]),t._v("了，后续退化为线性查找。")]),t._v(" "),a("li",[t._v("因此，"),a("strong",[t._v("列的排列顺序决定了可命中索引的列数")]),t._v("。")])]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("ul",[a("li",[t._v("如有索引(a, b, c, d)，查询条件 a = 1 and b = 2 and c > 3 and d = 4，则会在每个节点依次命中 a、b、c，无法命中 d。(很简单：索引命中只能是"),a("strong",[t._v("相等")]),t._v("的情况，不能是范围匹配)")])]),t._v(" "),a("h4",{attrs:{id:"和-in-可以乱序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-in-可以乱序"}},[t._v("#")]),t._v(" = 和 in 可以乱序")]),t._v(" "),a("p",[a("strong",[t._v("不需要考虑=、in 等的顺序")]),t._v("，Mysql 会自动优化这些条件的顺序，以匹配尽可能多的索引列。")]),t._v(" "),a("p",[t._v("例子：如有索引(a, b, c, d)，查询条件 c > 3 and b = 2 and a = 1 and d < 4 与 a = 1 and c > 3 and b = 2 and d < 4 等顺序都是可以的，MySQL 会自动优化为 a = 1 and b = 2 and c > 3 and d < 4，依次命中 a、b、c。")]),t._v(" "),a("h3",{attrs:{id:"约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[t._v("#")]),t._v(" 约束")]),t._v(" "),a("p",[t._v("数据库约束（"),a("code",[t._v("CONSTRAINT")]),t._v("）有哪些：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("NOT NULL")]),t._v(" - 用于控制字段的内容一定不能为空（NULL）。")]),t._v(" "),a("li",[a("code",[t._v("UNIQUE")]),t._v(" - 字段内容不能重复，一个表允许有多个 "),a("code",[t._v("Unique")]),t._v(" 约束。")]),t._v(" "),a("li",[a("code",[t._v("PRIMARY KEY")]),t._v(" - 数据表中对储存数据对象予以唯一和完整标识的数据列或属性的组合，它在一个表中只允许有一个。主键的取值不能为空值（Null）。")]),t._v(" "),a("li",[a("code",[t._v("FOREIGN KEY")]),t._v(" - 在一个表中存在的另一个表的主键称此表的外键。用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。")]),t._v(" "),a("li",[a("code",[t._v("CHECK")]),t._v(" - 用于控制字段的值范围。")])]),t._v(" "),a("h2",{attrs:{id:"二、并发控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、并发控制"}},[t._v("#")]),t._v(" 二、并发控制")]),t._v(" "),a("h3",{attrs:{id:"乐观锁和悲观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁和悲观锁"}},[t._v("#")]),t._v(" 乐观锁和悲观锁")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("数据库的乐观锁和悲观锁是什么？")]),t._v(" "),a("li",[t._v("数据库的乐观锁和悲观锁如何实现？")])])]),t._v(" "),a("p",[t._v("确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性，"),a("strong",[t._v("乐观锁和悲观锁是并发控制主要采用的技术手段。")])]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("悲观锁")])]),t._v(" - 假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作\n"),a("ul",[a("li",[a("strong",[t._v("在查询完数据的时候就把事务锁起来，直到提交事务（COMMIT）")])]),t._v(" "),a("li",[t._v("实现方式：使用数据库中的锁机制")])])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("乐观锁")])]),t._v(" - 假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。\n"),a("ul",[a("li",[a("strong",[t._v("在修改数据的时候把事务锁起来，通过 version 的方式来进行锁定")])]),t._v(" "),a("li",[t._v("实现方式：使用 version 版本或者时间戳")])])])]),t._v(" "),a("h3",{attrs:{id:"行级锁和表级锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行级锁和表级锁"}},[t._v("#")]),t._v(" 行级锁和表级锁")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("什么是行级锁和表级锁？")]),t._v(" "),a("li",[t._v("什么时候用行级锁？什么时候用表级锁？")])])]),t._v(" "),a("p",[t._v("从数据库的锁粒度来看，MySQL 中提供了两种封锁粒度：行级锁和表级锁。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("表级锁（table lock）")]),t._v(" - 锁定整张表。用户对表进行写操作前，需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他用户才能获得读锁，读锁之间不会相互阻塞。")]),t._v(" "),a("li",[a("strong",[t._v("行级锁（row lock）")]),t._v(" - 仅对指定的行记录进行加锁，这样其它进程还是可以对同一个表中的其它记录进行操作。")])]),t._v(" "),a("p",[t._v("二者需要权衡：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("锁定的数据量越少，锁竞争的发生频率就越小，系统的并发程度就越高")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("锁粒度越小，系统开销就越大")]),t._v("。")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("InnoDB")]),t._v(" 中，行锁是通过给索引上的索引项加锁来实现的。"),a("strong",[t._v("如果没有索引，"),a("code",[t._v("InnoDB")]),t._v(" 将会通过隐藏的聚簇索引来对记录加锁")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"读写锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写锁"}},[t._v("#")]),t._v(" 读写锁")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("什么是读写锁？")])])]),t._v(" "),a("ul",[a("li",[t._v("独享锁（Exclusive），简写为 X 锁，又称写锁。使用方式："),a("code",[t._v("SELECT ... FOR UPDATE;")])]),t._v(" "),a("li",[t._v("共享锁（Shared），简写为 S 锁，又称读锁。使用方式："),a("code",[t._v("SELECT ... LOCK IN SHARE MODE;")])])]),t._v(" "),a("p",[t._v("写锁和读锁的关系，简言之："),a("strong",[t._v("独享锁存在，其他事务就不能做任何操作")]),t._v("。")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("InnoDB")]),t._v(" 下的行锁、间隙锁、next-key 锁统统属于独享锁")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"意向锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#意向锁"}},[t._v("#")]),t._v(" 意向锁")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("什么是意向锁？")]),t._v(" "),a("li",[t._v("意向锁有什么用？")])])]),t._v(" "),a("p",[t._v("意向锁的作用是："),a("strong",[t._v("当存在表级锁和行级锁的情况下，必须先申请意向锁（表级锁，但不是真的加锁），再获取行级锁")]),t._v("。使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。")]),t._v(" "),a("p",[a("strong",[t._v("意向锁是 "),a("code",[t._v("InnoDB")]),t._v(" 自动加的，不需要用户干预")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"mvcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc"}},[t._v("#")]),t._v(" MVCC")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是 MVCC？")]),t._v(" "),a("p",[t._v("MVCC 有什么用？解决了什么问题？")]),t._v(" "),a("p",[t._v("MVCC 的原理是什么？")])]),t._v(" "),a("p",[t._v("多版本并发控制（Multi-Version Concurrency Control, MVCC）是 "),a("code",[t._v("InnoDB")]),t._v(" 存储引擎实现隔离级别的一种具体方式，"),a("strong",[t._v("用于实现提交读和可重复读这两种隔离级别")]),t._v("。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。")]),t._v(" "),a("p",[t._v("MVCC 的思想是：")]),t._v(" "),a("ul",[a("li",[t._v("保存数据在某个时间点的快照。"),a("strong",[t._v("写操作（DELETE、INSERT、UPDATE）更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系")]),t._v("，这一点和 "),a("code",[t._v("CopyOnWrite")]),t._v(" 类似。")]),t._v(" "),a("li",[t._v("脏读和不可重复读最根本的原因是"),a("strong",[t._v("事务读取到其它事务未提交的修改")]),t._v("。在事务进行读取操作时，为了解决脏读和不可重复读问题，"),a("strong",[t._v("MVCC 规定只能读取已经提交的快照")]),t._v("。当然一个事务可以读取自身未提交的快照，这不算是脏读。")])]),t._v(" "),a("h3",{attrs:{id:"next-key-锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#next-key-锁"}},[t._v("#")]),t._v(" Next-key 锁")]),t._v(" "),a("p",[t._v("Next-Key 锁是 MySQL 的 "),a("code",[t._v("InnoDB")]),t._v(" 存储引擎的一种锁实现。")]),t._v(" "),a("p",[t._v("MVCC 不能解决幻读问题，"),a("strong",[t._v("Next-Key 锁就是为了解决幻读问题")]),t._v("。在可重复读（"),a("code",[t._v("REPEATABLE READ")]),t._v("）隔离级别下，使用 "),a("strong",[t._v("MVCC + Next-Key 锁")]),t._v(" 可以解决幻读问题。")]),t._v(" "),a("p",[t._v("另外，根据针对 SQL 语句检索条件的不同，加锁又有以下三种情形需要我们掌握。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Record Lock")]),t._v(" - "),a("strong",[t._v("行锁对索引项加锁，若没有索引则使用表锁")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("Gap Lock")]),t._v(" - 对索引项之间的间隙加锁。锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。"),a("code",[t._v("SELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;")])]),t._v(" "),a("li",[a("code",[t._v("Next-key lock")]),t._v(" -它是 "),a("code",[t._v("Record Lock")]),t._v(" 和 "),a("code",[t._v("Gap Lock")]),t._v(" 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间。")])]),t._v(" "),a("p",[t._v("索引分为主键索引和非主键索引两种，如果一条 SQL 语句操作了主键索引，MySQL 就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL 会先锁定该非主键索引，再锁定相关的主键索引。在 "),a("code",[t._v("UPDATE")]),t._v("、"),a("code",[t._v("DELETE")]),t._v(" 操作时，MySQL 不仅锁定 "),a("code",[t._v("WHERE")]),t._v(" 条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的 "),a("code",[t._v("next-key lock")]),t._v("。")]),t._v(" "),a("p",[t._v("当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。发生死锁后，"),a("code",[t._v("InnoDB")]),t._v(" 一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。")]),t._v(" "),a("h2",{attrs:{id:"三、事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、事务"}},[t._v("#")]),t._v(" 三、事务")]),t._v(" "),a("blockquote",[a("p",[t._v("事务简单来说："),a("strong",[t._v("一个 Session 中所进行所有的操作，要么同时成功，要么同时失败")]),t._v("。具体来说，事务指的是满足 ACID 特性的一组操作，可以通过 "),a("code",[t._v("Commit")]),t._v(" 提交一个事务，也可以使用 "),a("code",[t._v("Rollback")]),t._v(" 进行回滚。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),a("p",[t._v("ACID — 数据库事务正确执行的四个基本要素：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("原子性（Atomicity）")])]),t._v(" "),a("li",[a("strong",[t._v("一致性（Consistency）")])]),t._v(" "),a("li",[a("strong",[t._v("隔离性（Isolation）")])]),t._v(" "),a("li",[a("strong",[t._v("持久性（Durability）")])])]),t._v(" "),a("p",[a("strong",[t._v("一个支持事务（Transaction）中的数据库系统，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93ACID.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"并发一致性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发一致性问题"}},[t._v("#")]),t._v(" 并发一致性问题")]),t._v(" "),a("p",[t._v("在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("丢失修改")])])]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("1")]),t._v(" 和 T"),a("sub",[t._v("2")]),t._v(" 两个事务都对一个数据进行修改，T"),a("sub",[t._v("1")]),t._v(" 先修改，T"),a("sub",[t._v("2")]),t._v(" 随后修改，T"),a("sub",[t._v("2")]),t._v(" 的修改覆盖了 T"),a("sub",[t._v("1")]),t._v(" 的修改。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("脏读")])])]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("1")]),t._v(" 修改一个数据，T"),a("sub",[t._v("2")]),t._v(" 随后读取这个数据。如果 T"),a("sub",[t._v("1")]),t._v(" 撤销了这次修改，那么 T"),a("sub",[t._v("2")]),t._v(" 读取的数据是脏数据。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E8%84%8F%E6%95%B0%E6%8D%AE.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不可重复读")])])]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("2")]),t._v(" 读取一个数据，T"),a("sub",[t._v("1")]),t._v(" 对该数据做了修改。如果 T"),a("sub",[t._v("2")]),t._v(" 再次读取这个数据，此时读取的结果和第一次读取的结果不同。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("幻读")])])]),t._v(" "),a("p",[t._v("T"),a("sub",[t._v("1")]),t._v(" 读取某个范围的数据，T"),a("sub",[t._v("2")]),t._v(" 在这个范围内插入新的数据，T"),a("sub",[t._v("1")]),t._v(" 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7-%E5%B9%BB%E8%AF%BB.png",alt:"img"}})]),t._v(" "),a("p",[t._v("并发一致性解决方案：")]),t._v(" "),a("p",[t._v("产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。")]),t._v(" "),a("p",[t._v("并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。")]),t._v(" "),a("h3",{attrs:{id:"事务隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离"}},[t._v("#")]),t._v(" 事务隔离")]),t._v(" "),a("p",[t._v("数据库隔离级别：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("未提交读（READ UNCOMMITTED）")])]),t._v(" - 事务中的修改，即使没有提交，对其它事务也是可见的。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("提交读（READ COMMITTED）")])]),t._v(" - 一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("重复读（REPEATABLE READ）")])]),t._v(" - 保证在同一个事务中多次读取同样数据的结果是一样的。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("串行化（SERIALIXABLE）")])]),t._v(" - 强制事务串行执行。")])]),t._v(" "),a("p",[t._v("数据库隔离级别解决的问题：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("隔离级别")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("脏读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("不可重复读")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("幻读")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("未提交读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("提交读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("可重复读")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("可串行化")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔️")])])])]),t._v(" "),a("h3",{attrs:{id:"分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[t._v("#")]),t._v(" 分布式事务")]),t._v(" "),a("p",[t._v("在单一数据节点中，事务仅限于对单一数据库资源的访问控制，称之为 "),a("strong",[t._v("本地事务")]),t._v("。几乎所有的成熟的关系型数据库都提供了对本地事务的原生支持。")]),t._v(" "),a("p",[a("strong",[t._v("分布式事务")]),t._v(" 是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。")]),t._v(" "),a("h4",{attrs:{id:"两阶段提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交"}},[t._v("#")]),t._v(" 两阶段提交")]),t._v(" "),a("p",[t._v("两阶段提交（XA）对业务侵入很小。 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于 XA 协议的分布式事务。 XA 协议能够严格保障事务 "),a("code",[t._v("ACID")]),t._v(" 特性。")]),t._v(" "),a("p",[t._v("严格保障事务 "),a("code",[t._v("ACID")]),t._v(" 特性是一把双刃剑。 事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。 因此，在高并发的性能至上场景中，基于 XA 协议的分布式事务并不是最佳选择。")]),t._v(" "),a("h4",{attrs:{id:"柔性事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柔性事务"}},[t._v("#")]),t._v(" 柔性事务")]),t._v(" "),a("p",[t._v("如果将实现了"),a("code",[t._v("ACID")]),t._v(" 的事务要素的事务称为刚性事务的话，那么基于"),a("code",[t._v("BASE")]),t._v("事务要素的事务则称为柔性事务。 "),a("code",[t._v("BASE")]),t._v("是基本可用、柔性状态和最终一致性这三个要素的缩写。")]),t._v(" "),a("ul",[a("li",[t._v("基本可用（Basically Available）保证分布式事务参与方不一定同时在线。")]),t._v(" "),a("li",[t._v("柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。")]),t._v(" "),a("li",[t._v("而最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。")])]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("ACID")]),t._v("事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升。")]),t._v(" "),a("p",[t._v("基于"),a("code",[t._v("ACID")]),t._v("的强一致性事务和基于"),a("code",[t._v("BASE")]),t._v("的最终一致性事务都不是银弹，只有在最适合的场景中才能发挥它们的最大长处。 可通过下表详细对比它们之间的区别，以帮助开发者进行技术选型。")]),t._v(" "),a("h4",{attrs:{id:"事务方案对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务方案对比"}},[t._v("#")]),t._v(" 事务方案对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("本地事务")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("两（三）阶段事务")]),t._v(" "),a("th",[t._v("柔性事务")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("业务改造")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",[t._v("实现相关接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("一致性")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("支持")]),t._v(" "),a("td",[t._v("最终一致")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("隔离性")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("支持")]),t._v(" "),a("td",[t._v("业务方保证")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("并发性能")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无影响")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("严重衰退")]),t._v(" "),a("td",[t._v("略微衰退")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("适合场景")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("业务方处理不一致")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("短事务 & 低并发")]),t._v(" "),a("td",[t._v("长事务 & 高并发")])])])]),t._v(" "),a("h2",{attrs:{id:"四、分库分表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、分库分表"}},[t._v("#")]),t._v(" 四、分库分表")]),t._v(" "),a("h3",{attrs:{id:"什么是分库分表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是分库分表"}},[t._v("#")]),t._v(" 什么是分库分表")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是分库分表？什么是垂直拆分？什么是水平拆分？什么是 Sharding？")]),t._v(" "),a("p",[t._v("分库分表是为了解决什么问题？")]),t._v(" "),a("p",[t._v("分库分表有什么优点？")]),t._v(" "),a("p",[t._v("分库分表有什么策略？")])]),t._v(" "),a("p",[t._v("分库分表的基本思想就是：把原本完整的数据切分成多个部分，放到不同的数据库或表上。")]),t._v(" "),a("p",[t._v("分库分表一定是为了支撑 "),a("strong",[t._v("高并发、数据量大")]),t._v("两个问题的。")]),t._v(" "),a("h4",{attrs:{id:"垂直切分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垂直切分"}},[t._v("#")]),t._v(" 垂直切分")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("垂直切分")]),t._v("，是 "),a("strong",[t._v("把一个有很多字段的表给拆分成多个表，或者是多个库上去")]),t._v("。一般来说，会 "),a("strong",[t._v("将较少的、访问频率较高的字段放到一个表里去")]),t._v("，然后 "),a("strong",[t._v("将较多的、访问频率较低的字段放到另外一个表里去")]),t._v("。因为数据库是有缓存的，访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/image-20200114211639899.png",alt:"image-20200114211639899"}})]),t._v(" "),a("p",[t._v("一般来说，满足下面的条件就可以考虑扩容了：")]),t._v(" "),a("ul",[a("li",[t._v("Mysql 单库超过 5000 万条记录，Oracle 单库超过 1 亿条记录，DB 压力就很大。")]),t._v(" "),a("li",[t._v("单库超过每秒 2000 个并发时，而一个健康的单库最好保持在每秒 1000 个并发左右，不要太大。")])]),t._v(" "),a("p",[t._v("在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。")]),t._v(" "),a("h4",{attrs:{id:"水平拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#水平拆分"}},[t._v("#")]),t._v(" 水平拆分")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("水平拆分")]),t._v(" 又称为 "),a("strong",[t._v("Sharding")]),t._v("，它是将同一个表中的记录拆分到多个结构相同的表中。当 "),a("strong",[t._v("单表数据量太大")]),t._v(" 时，会极大影响 "),a("strong",[t._v("SQL 执行的性能")]),t._v(" 。分表是将原来一张表的数据分布到数据库集群的不同节点上，从而缓解单点的压力。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/image-20200114211203589.png",alt:"image-20200114211203589"}})]),t._v(" "),a("p",[t._v("一般来说，"),a("strong",[t._v("单表有 200 万条数据")]),t._v(" 的时候，性能就会相对差一些了，需要考虑分表了。但是，这也要视具体情况而定，可能是 100 万条，也可能是 500 万条，SQL 越复杂，就最好让单表行数越少。")]),t._v(" "),a("h4",{attrs:{id:"分库分表的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表的优点"}},[t._v("#")]),t._v(" 分库分表的优点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("#")]),t._v(" "),a("th",[t._v("分库分表前")]),t._v(" "),a("th",[t._v("分库分表后")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("并发支撑情况")]),t._v(" "),a("td",[t._v("单机部署，扛不住高并发")]),t._v(" "),a("td",[t._v("从单机到多机，能承受的并发增加了多倍")])]),t._v(" "),a("tr",[a("td",[t._v("磁盘使用情况")]),t._v(" "),a("td",[t._v("单机磁盘容量几乎撑满")]),t._v(" "),a("td",[t._v("拆分为多个库，数据库服务器磁盘使用率大大降低")])]),t._v(" "),a("tr",[a("td",[t._v("SQL 执行性能")]),t._v(" "),a("td",[t._v("单表数据量太大，SQL 越跑越慢")]),t._v(" "),a("td",[t._v("单表数据量减少，SQL 执行效率明显提升")])])])]),t._v(" "),a("h4",{attrs:{id:"分库分表策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表策略"}},[t._v("#")]),t._v(" 分库分表策略")]),t._v(" "),a("ul",[a("li",[t._v("哈希取模："),a("code",[t._v("hash(key) % N")]),t._v(" 或 "),a("code",[t._v("id % N")]),t._v(" "),a("ul",[a("li",[t._v("优点：可以平均分配每个库的数据量和请求压力（负载均衡）。")]),t._v(" "),a("li",[t._v("缺点：扩容麻烦，需要数据迁移。")])])]),t._v(" "),a("li",[t._v("范围：可以按照 ID 或时间划分范围。\n"),a("ul",[a("li",[t._v("优点：扩容简单。")]),t._v(" "),a("li",[t._v("缺点：这种策略容易产生热点问题。")])])]),t._v(" "),a("li",[t._v("映射表：使用单独的一个数据库来存储映射关系。\n"),a("ul",[a("li",[t._v("缺点：存储映射关系的数据库也可能成为性能瓶颈，且一旦宕机，分库分表的数据库就无法工作。所以不建议使用这种策略。")]),t._v(" "),a("li",[t._v("优点：扩容简单，可以解决分布式 ID 问题。")])])])]),t._v(" "),a("h3",{attrs:{id:"分库分表中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表中间件"}},[t._v("#")]),t._v(" 分库分表中间件")]),t._v(" "),a("blockquote",[a("p",[t._v("❓ 常见问题：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("你用过哪些分库分表中间件，简单介绍一下？")])]),t._v(" "),a("li",[a("p",[t._v("不同的分库分表中间件各自有什么特性，有什么优缺点？")])]),t._v(" "),a("li",[a("p",[t._v("分库分表中间件技术如何选型？")])])])]),t._v(" "),a("h4",{attrs:{id:"常见的分库分表中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的分库分表中间件"}},[t._v("#")]),t._v(" 常见的分库分表中间件")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/alibaba/cobar",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cobar"),a("OutboundLink")],1),t._v(" - 阿里 b2b 团队开发和开源的，属于 proxy 层方案，就是介于应用服务器和数据库服务器之间。应用程序通过 JDBC 驱动访问 cobar 集群，cobar 根据 SQL 和分库规则对 SQL 做分解，然后分发到 MySQL 集群不同的数据库实例上执行。早些年还可以用，但是最近几年都没更新了，基本没啥人用，差不多算是被抛弃的状态吧。而且不支持读写分离、存储过程、跨库 join 和分页等操作。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/alibaba/tb_tddl",target:"_blank",rel:"noopener noreferrer"}},[t._v("TDDL"),a("OutboundLink")],1),t._v(" - 淘宝团队开发的，属于 client 层方案。支持基本的 crud 语法和读写分离，但不支持 join、多表查询等语法。目前使用的也不多，因为还依赖淘宝的 diamond 配置管理系统。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Qihoo360/Atlas",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atlas"),a("OutboundLink")],1),t._v(" - 360 开源的，属于 proxy 层方案，以前是有一些公司在用的，但是确实有一个很大的问题就是社区最新的维护都在 5 年前了。所以，现在用的公司基本也很少了。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/dangdangdotcom/sharding-jdbc",target:"_blank",rel:"noopener noreferrer"}},[t._v("sharding-jdbc"),a("OutboundLink")],1),t._v(" - 当当开源的，属于 client 层方案。确实之前用的还比较多一些，因为 SQL 语法支持也比较多，没有太多限制，而且目前推出到了 2.0 版本，支持分库分表、读写分离、分布式 id 生成、柔性事务（最大努力送达型事务、TCC 事务）。而且确实之前使用的公司会比较多一些（这个在官网有登记使用的公司，可以看到从 2017 年一直到现在，是有不少公司在用的），目前社区也还一直在开发和维护，还算是比较活跃，个人认为算是一个现在也"),a("strong",[t._v("可以选择的方案")]),t._v("。")]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.mycat.org.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mycat"),a("OutboundLink")],1),t._v(" - 基于 cobar 改造的，属于 proxy 层方案，支持的功能非常完善，而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃，也有一些公司开始在用了。但是确实相比于 sharding jdbc 来说，年轻一些，经历的锤炼少一些。")])]),t._v(" "),a("h4",{attrs:{id:"分库分表中间件技术选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表中间件技术选型"}},[t._v("#")]),t._v(" 分库分表中间件技术选型")]),t._v(" "),a("p",[t._v("建议使用的是 sharding-jdbc 和 mycat。")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://github.com/dangdangdotcom/sharding-jdbc",target:"_blank",rel:"noopener noreferrer"}},[t._v("sharding-jdbc"),a("OutboundLink")],1),t._v(" 这种 client 层方案的"),a("strong",[t._v("优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高")]),t._v("，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要"),a("strong",[t._v("耦合")]),t._v(" sharding-jdbc 的依赖。其本质上通过配置多数据源，然后根据设定的分库分表策略，计算路由，将请求发送到计算得到的节点上。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"http://www.mycat.org.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mycat"),a("OutboundLink")],1),t._v(" 这种 proxy 层方案的"),a("strong",[t._v("缺点在于需要部署")]),t._v("，自己运维一套中间件，运维成本高，但是"),a("strong",[t._v("好处在于对于各个项目是透明的")]),t._v("，如果遇到升级之类的都是自己中间件那里搞就行了。")])])]),t._v(" "),a("p",[t._v("通常来说，这两个方案其实都可以选用，但是我个人建议中小型公司选用 sharding-jdbc，client 层方案轻便，而且维护成本低，不需要额外增派人手，而且中小型公司系统复杂度会低一些，项目也没那么多；但是中大型公司最好还是选用 mycat 这类 proxy 层方案，因为可能大公司系统和项目非常多，团队很大，人员充足，那么最好是专门弄个人来研究和维护 mycat，然后大量项目直接透明使用即可。")]),t._v(" "),a("h3",{attrs:{id:"分库分表的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表的问题"}},[t._v("#")]),t._v(" 分库分表的问题")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[t._v("分库分表的常见问题有哪些？")])]),t._v(" "),a("li",[a("p",[t._v("你是如何解决分库分表的问题的？")])])]),t._v(" "),a("p",[t._v("下文一一讲解常见分库分表的问题及解决方案。")])]),t._v(" "),a("h4",{attrs:{id:"分布式事务-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务-2"}},[t._v("#")]),t._v(" 分布式事务")]),t._v(" "),a("p",[t._v("方案一：使用数据库事务")]),t._v(" "),a("ul",[a("li",[t._v("优点：交由数据库管理，简单有效")]),t._v(" "),a("li",[t._v("缺点：性能代价高，特别是 shard 越来越多时")])]),t._v(" "),a("p",[t._v("方案二：由应用程序和数据库共同控制")]),t._v(" "),a("ul",[a("li",[t._v("原理：将一个跨多个数据库的分布式事务分拆成多个仅处于单个数据库上面的小事务，并通过应用程序来总控各个小事务。")]),t._v(" "),a("li",[t._v("优点：性能上有优势")]),t._v(" "),a("li",[t._v("缺点：需要应用程序在事务控制上做灵活设计。如果使用了 spring 的事务管理，改动起来会面临一定的困难。")])]),t._v(" "),a("h4",{attrs:{id:"跨节点-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨节点-join"}},[t._v("#")]),t._v(" 跨节点 Join")]),t._v(" "),a("p",[t._v("只要是进行切分，跨节点 Join 的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发生。解决这一问题的普遍做法是分两次查询实现。在第一次查询的结果集中找出关联数据的 id，根据这些 id 发起第二次请求得到关联数据。")]),t._v(" "),a("h4",{attrs:{id:"跨节点的-count-order-by-group-by-以及聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨节点的-count-order-by-group-by-以及聚合函数"}},[t._v("#")]),t._v(" 跨节点的 count,order by,group by 以及聚合函数")]),t._v(" "),a("p",[t._v("这些是一类问题，因为它们都需要基于全部数据集合进行计算。多数的代理都不会自动处理合并工作。")]),t._v(" "),a("p",[t._v("解决方案：与解决跨节点 join 问题的类似，分别在各个节点上得到结果后在应用程序端进行合并。和 join 不同的是每个节点的查询可以并行执行，因此很多时候它的速度要比单一大表快很多。但如果结果集很大，对应用程序内存的消耗是一个问题。")]),t._v(" "),a("p",[t._v("业务角度上的解决方案：")]),t._v(" "),a("ul",[a("li",[t._v("如果是在前台应用提供分页，则限定用户只能看前面 n 页，这个限制在业务上也是合理的，一般看后面的分页意义不大（如果一定要看，可以要求用户缩小范围重新查询）。")]),t._v(" "),a("li",[t._v("如果是后台批处理任务要求分批获取数据，则可以加大 page size，比如每次获取 5000 条记录，有效减少分页数（当然离线访问一般走备库，避免冲击主库）。")]),t._v(" "),a("li",[t._v("分库设计时，一般还有配套大数据平台汇总所有分库的记录，有些分页查询可以考虑走大数据平台。")])]),t._v(" "),a("h4",{attrs:{id:"分布式-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id"}},[t._v("#")]),t._v(" 分布式 ID")]),t._v(" "),a("p",[t._v("一旦数据库被切分到多个物理节点上，我们将不能再依赖数据库自身的主键生成机制。一方面，某个分区数据库自生成的 ID 无法保证在全局上是唯一的；另一方面，应用程序在插入数据之前需要先获得 ID，以便进行 SQL 路由。")]),t._v(" "),a("p",[t._v("一些常见的主键生成策略：")]),t._v(" "),a("ul",[a("li",[t._v("使用全局唯一 ID：GUID。")]),t._v(" "),a("li",[t._v("为每个分片指定一个 ID 范围。")]),t._v(" "),a("li",[t._v("分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)。")])]),t._v(" "),a("h4",{attrs:{id:"数据迁移-容量规划-扩容等问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据迁移-容量规划-扩容等问题"}},[t._v("#")]),t._v(" 数据迁移，容量规划，扩容等问题")]),t._v(" "),a("p",[t._v("来自淘宝综合业务平台团队，它利用对 2 的倍数取余具有向前兼容的特性（如对 4 取余得 1 的数对 2 取余也是 1）来分配数据，避免了行级别的数据迁移，但是依然需要进行表级别的迁移，同时对扩容规模和分表数量都有限制。总得来说，这些方案都不是十分的理想，多多少少都存在一些缺点，这也从一个侧面反映出了 Sharding 扩容的难度。")]),t._v(" "),a("h2",{attrs:{id:"五、集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、集群"}},[t._v("#")]),t._v(" 五、集群")]),t._v(" "),a("blockquote",[a("p",[t._v("这个专题需要根据熟悉哪个数据库而定，但是主流、成熟的数据库都会实现一些基本功能，只是实现方式、策略上有所差异。由于本人较为熟悉 Mysql，所以下面主要介绍 Mysql 系统架构问题。")])]),t._v(" "),a("h3",{attrs:{id:"复制机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制机制"}},[t._v("#")]),t._v(" 复制机制")]),t._v(" "),a("p",[t._v("Mysql 支持两种复制：基于行的复制和基于语句的复制。")]),t._v(" "),a("p",[t._v("这两种方式都是在主库上记录二进制日志（binlog），然后在从库上以异步方式更新主库上的日志记录。这意味着：复制过程存在时延，这段时间内，主从数据可能不一致（即最终一致性）。")]),t._v(" "),a("p",[t._v("主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("binlog 线程")]),t._v(" ：负责将主服务器上的数据更改写入二进制文件（binlog）中。")]),t._v(" "),a("li",[a("strong",[t._v("I/O 线程")]),t._v(" ：负责从主服务器上读取二进制日志文件，并写入从服务器的日志中。")]),t._v(" "),a("li",[a("strong",[t._v("SQL 线程")]),t._v(" ：负责读取日志并执行 SQL 语句以更新数据。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/mysql/master-slave.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"读写分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写分离"}},[t._v("#")]),t._v(" 读写分离")]),t._v(" "),a("p",[t._v("主服务器用来处理写操作以及实时性要求比较高的读操作，而从服务器用来处理读操作。")]),t._v(" "),a("p",[t._v("读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。")]),t._v(" "),a("p",[t._v("MySQL 读写分离能提高性能的原因在于：")]),t._v(" "),a("ul",[a("li",[t._v("主从服务器负责各自的读和写，极大程度缓解了锁的争用；")]),t._v(" "),a("li",[t._v("从服务器可以配置 "),a("code",[t._v("MyISAM")]),t._v(" 引擎，提升查询性能以及节约系统开销；")]),t._v(" "),a("li",[t._v("增加冗余，提高可用性。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/mysql/master-slave-proxy.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"六、数据库优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、数据库优化"}},[t._v("#")]),t._v(" 六、数据库优化")]),t._v(" "),a("p",[t._v("数据库优化的路线一般为：SQL 优化、结构优化、配置优化、硬件优化。前两个方向一般是普通开发的考量点，而后两个方向一般是 DBA 的考量点。")]),t._v(" "),a("h3",{attrs:{id:"sql-优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-优化"}},[t._v("#")]),t._v(" SQL 优化")]),t._v(" "),a("blockquote",[a("p",[t._v("SQL 优化是数据库优化的最常见、最初级手段。")]),t._v(" "),a("p",[t._v("在执行 SQL 语句，语句中字段的顺序、查询策略等都可能会影响到 SQL 的执行性能。")])]),t._v(" "),a("h4",{attrs:{id:"执行计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行计划"}},[t._v("#")]),t._v(" 执行计划")]),t._v(" "),a("p",[t._v("如何检验修改后的 SQL 确实有优化效果？这就需要用到执行计划（"),a("code",[t._v("EXPLAIN")]),t._v("）。")]),t._v(" "),a("p",[t._v("使用执行计划 "),a("code",[t._v("EXPLAIN")]),t._v(" 用来分析 "),a("code",[t._v("SELECT")]),t._v(" 查询效率，开发人员可以通过分析 "),a("code",[t._v("EXPLAIN")]),t._v(" 结果来优化查询语句。")]),t._v(" "),a("p",[t._v("比较重要的字段有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("select_type")]),t._v(" - 查询类型，有简单查询、联合查询、子查询等")]),t._v(" "),a("li",[a("code",[t._v("key")]),t._v(" - 使用的索引")]),t._v(" "),a("li",[a("code",[t._v("rows")]),t._v(" - 扫描的行数")])]),t._v(" "),a("blockquote",[a("p",[t._v("更多内容请参考："),a("a",{attrs:{href:"https://segmentfault.com/a/1190000008131735",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL 性能优化神器 Explain 使用分析"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"访问数据优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问数据优化"}},[t._v("#")]),t._v(" 访问数据优化")]),t._v(" "),a("p",[t._v("减少请求的数据量：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("只返回必要的列")]),t._v(" - 不要查询不需要的列，尽量避免使用 "),a("code",[t._v("SELECT *")]),t._v(" 语句。")]),t._v(" "),a("li",[a("strong",[t._v("只返回必要的行")]),t._v(" - 使用 "),a("code",[t._v("WHERE")]),t._v(" 语句进行查询过滤，有时候也需要使用 "),a("code",[t._v("LIMIT")]),t._v(" 语句来限制返回的数据。")]),t._v(" "),a("li",[a("strong",[t._v("缓存重复查询的数据")]),t._v(" - 使用缓存可以避免在数据库中进行查询，特别要查询的数据经常被重复查询，缓存可以带来的查询性能提升将会是非常明显的。")])]),t._v(" "),a("p",[t._v("减少服务器端扫描的行数：")]),t._v(" "),a("ul",[a("li",[t._v("最有效的方式是"),a("strong",[t._v("使用索引来覆盖查询")]),t._v("（即 "),a("code",[t._v("WHERE")]),t._v(" 后的过滤查询字段最好是索引字段）。")])]),t._v(" "),a("h4",{attrs:{id:"重构查询方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重构查询方式"}},[t._v("#")]),t._v(" 重构查询方式")]),t._v(" "),a("h5",{attrs:{id:"切分查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切分查询"}},[t._v("#")]),t._v(" 切分查询")]),t._v(" "),a("p",[t._v("一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("DELEFT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" messages "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" DATE_SUB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MONTH")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" {\n    rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" do_query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE FROM messages WHERE create  < DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n} "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" rows_affected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h5",{attrs:{id:"分解关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分解关联查询"}},[t._v("#")]),t._v(" 分解关联查询")]),t._v(" "),a("p",[t._v("将一个大连接查询（JOIN）分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("缓存更高效")]),t._v("。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。")]),t._v(" "),a("li",[t._v("分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而"),a("strong",[t._v("减少冗余记录的查询")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("减少锁竞争")]),t._v("；")]),t._v(" "),a("li",[a("strong",[t._v("在应用层进行连接，可以更容易对数据库进行拆分")]),t._v("，从而更容易做到高性能和可扩展。")]),t._v(" "),a("li",[a("strong",[t._v("查询本身效率也可能会有所提升")]),t._v("。例如下面的例子中，使用 "),a("code",[t._v("IN()")]),t._v(" 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tag\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" tag_post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" tag_post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" tag_post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("post_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mysql'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mysql'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tag_post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" tag_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("567")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9098")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8904")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"sql-语句细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-语句细节"}},[t._v("#")]),t._v(" SQL 语句细节")]),t._v(" "),a("h5",{attrs:{id:"选择最有效率的表名顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择最有效率的表名顺序"}},[t._v("#")]),t._v(" 选择最有效率的表名顺序")]),t._v(" "),a("p",[t._v("数据库按照"),a("strong",[t._v("从右到左的顺序处理 FROM 子句中的表名，FROM 子句中写在最后的表将被最先处理")]),t._v("。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("FROM")]),t._v(" 子句中包含多个表的情况下：")]),t._v(" "),a("ul",[a("li",[t._v("如果多个表是完全"),a("strong",[t._v("无关系")]),t._v("的话，将记录和列名最少的表，写在最后，然后依次类推。也就是说："),a("strong",[t._v("选择记录条数最少的表放在最后")]),t._v("。")])]),t._v(" "),a("p",[t._v("如果有 3 个以上的表连接查询：")]),t._v(" "),a("ul",[a("li",[t._v("如果多个表是"),a("strong",[t._v("有关系")]),t._v("的话，将引用最多的表，放在最后，然后依次类推。也就是说："),a("strong",[t._v("被其他表所引用的表放在最后")]),t._v("。")])]),t._v(" "),a("p",[t._v("例如：查询员工的编号，姓名，工资，工资等级，部门名")]),t._v(" "),a("p",[a("strong",[t._v("emp 表被引用得最多，记录数也是最多，因此放在 form 字句的最后面")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("salgrade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("grade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dname\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" salgrade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("emp\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("between")]),t._v(" salgrade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("losal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" salgrade"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hisal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h5",{attrs:{id:"where-子句中的连接顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-子句中的连接顺序"}},[t._v("#")]),t._v(" WHERE 子句中的连接顺序")]),t._v(" "),a("p",[t._v("数据库按照"),a("strong",[t._v("从右到左的顺序解析 "),a("code",[t._v("WHERE")]),t._v(" 子句")]),t._v("。")]),t._v(" "),a("p",[t._v("因此，"),a("strong",[t._v("表之间的连接必须写在其他 WHERE 条件的左边")]),t._v("，那些"),a("strong",[t._v("可以过滤掉最大数量记录的条件必须写在 WHERE 子句的之右")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("emp.sal 可以过滤多条记录，写在 WHERE 字句的最右边")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dname\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("emp\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h5",{attrs:{id:"select-子句中避免使用-号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-子句中避免使用-号"}},[t._v("#")]),t._v(" SELECT 子句中避免使用 "),a("code",[t._v("*")]),t._v(" 号")]),t._v(" "),a("p",[t._v("我们当时学习的时候，“*” 号是可以获取表中全部的字段数据的。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("但是它要通过查询数据字典完成的，这意味着将耗费更多的时间")])]),t._v(" "),a("li",[t._v("使用*号写出来的 SQL 语句也不够直观。")])]),t._v(" "),a("hr"),t._v(" "),a("h5",{attrs:{id:"用-truncate-替代-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-truncate-替代-delete"}},[t._v("#")]),t._v(" 用 TRUNCATE 替代 DELETE")]),t._v(" "),a("p",[t._v("如果需要"),a("strong",[t._v("清空所有表记录")]),t._v("，使用 TRUNCATE 比 DELETE 执行效率高：")]),t._v(" "),a("p",[a("strong",[t._v("DELETE 是一条一条记录的删除，而 Truncate 是将整个表删除，仅保留表结构")])]),t._v(" "),a("h5",{attrs:{id:"使用内部函数提高-sql-效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用内部函数提高-sql-效率"}},[t._v("#")]),t._v(" 使用内部函数提高 SQL 效率")]),t._v(" "),a("p",[a("strong",[t._v("例如使用 mysql 的 concat() 函数会比使用 "),a("code",[t._v("||")]),t._v(" 拼接速度快，因为 concat() 函数已经被 mysql 优化过了。")])]),t._v(" "),a("h5",{attrs:{id:"使用表或列的别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用表或列的别名"}},[t._v("#")]),t._v(" 使用表或列的别名")]),t._v(" "),a("p",[t._v("如果表或列的名称太长了，使用一些简短的别名也能稍微提高一些 SQL 的性能。毕竟要扫描的字符长度就变少了。")]),t._v(" "),a("h5",{attrs:{id:"sql-关键字大写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-关键字大写"}},[t._v("#")]),t._v(" SQL 关键字大写")]),t._v(" "),a("p",[t._v("我们在编写 SQL 的时候，官方推荐的是使用大写来写关键字，"),a("strong",[t._v("因为 Oracle 服务器总是先将小写字母转成大写后，才执行")])]),t._v(" "),a("h5",{attrs:{id:"用-替代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-替代"}},[t._v("#")]),t._v(" 用 "),a("code",[t._v(">=")]),t._v(" 替代 "),a("code",[t._v(">")])]),t._v(" "),a("p",[t._v("❌ 低效方式：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 首先定位到DEPTNO=3的记录并且扫描到第一个DEPT大于3的记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DEPTNO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),a("p",[t._v("✔ 高效方式：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 直接跳到第一个DEPT等于4的记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" DEPTNO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("h5",{attrs:{id:"用-in-替代-or"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-in-替代-or"}},[t._v("#")]),t._v(" 用 IN 替代 OR")]),t._v(" "),a("p",[t._v("❌ 低效方式：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("✔ 高效方式：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"总是使用索引的第一个列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总是使用索引的第一个列"}},[t._v("#")]),t._v(" 总是使用索引的第一个列")]),t._v(" "),a("p",[t._v("如果索引是建立在多个列上，只有在它的第一个列被 WHERE 子句引用时，优化器才会选择使用该索引。 当只引用索引的第二个列时，不引用索引的第一个列时，优化器使用了全表扫描而忽略了索引")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" emp_sal_job_idex\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----------------------------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" job "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SALES'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"sql-关键字尽量大写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-关键字尽量大写"}},[t._v("#")]),t._v(" SQL 关键字尽量大写")]),t._v(" "),a("p",[t._v("SQL 关键字尽量大写，如：Oracle 默认会将 SQL 语句中的关键字转为大写后在执行。")]),t._v(" "),a("h3",{attrs:{id:"结构优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构优化"}},[t._v("#")]),t._v(" 结构优化")]),t._v(" "),a("p",[t._v("数据库结构优化可以从以下方向着手：")]),t._v(" "),a("ul",[a("li",[t._v("数据类型优化")]),t._v(" "),a("li",[t._v("范式和反范式优化")]),t._v(" "),a("li",[t._v("索引优化 - 细节请看索引和约束章节")]),t._v(" "),a("li",[t._v("分库分表 - 细节请看分库分表章节")])]),t._v(" "),a("h4",{attrs:{id:"数据类型优化原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化原则"}},[t._v("#")]),t._v(" 数据类型优化原则")]),t._v(" "),a("ul",[a("li",[t._v("更小的通常更好")]),t._v(" "),a("li",[t._v("简单就好，如整型比字符型操作代价低")]),t._v(" "),a("li",[t._v("尽量避免 NULL")])]),t._v(" "),a("h4",{attrs:{id:"范式和反范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范式和反范式"}},[t._v("#")]),t._v(" 范式和反范式")]),t._v(" "),a("p",[t._v("范式和反范式各有利弊，需要根据实际情况权衡。")]),t._v(" "),a("p",[t._v("范式化的目标是"),a("strong",[t._v("尽力减少冗余列，节省空间")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("范式化的优点是：")]),t._v(" "),a("ul",[a("li",[t._v("减少冗余列，要写的数据就少，写操作的性能提高；")]),t._v(" "),a("li",[t._v("检索列数据时，"),a("code",[t._v("DISTINCT")]),t._v(" 或 "),a("code",[t._v("GROUP BY")]),t._v(" 操作减少。")])])]),t._v(" "),a("li",[a("p",[t._v("范式化的缺点是：增加关联查询。")])])]),t._v(" "),a("p",[t._v("反范式化的目标是"),a("strong",[t._v("适当增加冗余列，以避免关联查询")]),t._v("。")]),t._v(" "),a("p",[t._v("反范式化的缺点是：")]),t._v(" "),a("ul",[a("li",[t._v("冗余列增多，空间变大，写操作性能下降；")]),t._v(" "),a("li",[t._v("检索列数据时，DISTINCT 或 GROUP BY 操作变多；")])]),t._v(" "),a("h3",{attrs:{id:"配置优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置优化"}},[t._v("#")]),t._v(" 配置优化")]),t._v(" "),a("blockquote",[a("p",[t._v("配置优化主要是针对 Mysql 服务器，例如："),a("code",[t._v("max_connections")]),t._v("、"),a("code",[t._v("max_heap_table_size")]),t._v("、"),a("code",[t._v("open_files_limit")]),t._v("、"),a("code",[t._v("max_allowed_packet")]),t._v(" 等等。")]),t._v(" "),a("p",[t._v("在不同环境，不同场景下，应该酌情使用合理的配置。这种优化比较考验 Mysql 运维经验，一般是 DBA 的考量，普通开发接触的较少。")]),t._v(" "),a("p",[t._v("Mysql 配置说明请参考："),a("RouterLink",{attrs:{to:"/12.数据库/03.关系型数据库/01.综合/sql/mysql/mysql-config.html"}},[t._v("Mysql 服务器配置说明")])],1)]),t._v(" "),a("h3",{attrs:{id:"硬件优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#硬件优化"}},[t._v("#")]),t._v(" 硬件优化")]),t._v(" "),a("p",[t._v("数据库扩容、使用高配设备等等。核心就是一个字：钱。")]),t._v(" "),a("h2",{attrs:{id:"七、数据库理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、数据库理论"}},[t._v("#")]),t._v(" 七、数据库理论")]),t._v(" "),a("h3",{attrs:{id:"函数依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数依赖"}},[t._v("#")]),t._v(" 函数依赖")]),t._v(" "),a("p",[t._v("记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。")]),t._v(" "),a("p",[t._v("如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。")]),t._v(" "),a("p",[t._v("对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖；")]),t._v(" "),a("p",[t._v("对于 A->B，B->C，则 A->C 是一个传递依赖。")]),t._v(" "),a("h3",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),a("p",[t._v("以下的学生课程关系的函数依赖为 Sno, Cname -> Sname, Sdept, Mname, Grade，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Cname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Grade")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("90")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("80")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("100")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("95")])])])]),t._v(" "),a("p",[t._v("不符合范式的关系，会产生很多异常，主要有以下四种异常：")]),t._v(" "),a("ul",[a("li",[t._v("冗余数据：例如 学生-2 出现了两次。")]),t._v(" "),a("li",[t._v("修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。")]),t._v(" "),a("li",[t._v("删除异常：删除一个信息，那么也会丢失其它信息。例如如果删除了 课程-1，需要删除第一行和第三行，那么 学生-1 的信息就会丢失。")]),t._v(" "),a("li",[t._v("插入异常，例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。")])]),t._v(" "),a("h3",{attrs:{id:"范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范式"}},[t._v("#")]),t._v(" 范式")]),t._v(" "),a("p",[t._v("范式理论是为了解决以上提到四种异常。")]),t._v(" "),a("p",[t._v("高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/database/RDB/数据库范式.png"}})]),t._v(" "),a("h4",{attrs:{id:"第一范式-1nf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一范式-1nf"}},[t._v("#")]),t._v(" 第一范式 (1NF)")]),t._v(" "),a("p",[t._v("属性不可分。")]),t._v(" "),a("h4",{attrs:{id:"第二范式-2nf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二范式-2nf"}},[t._v("#")]),t._v(" 第二范式 (2NF)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("每个非主属性完全函数依赖于键码。")])]),t._v(" "),a("li",[a("p",[t._v("可以通过分解来满足。")])])]),t._v(" "),a("p",[a("strong",[t._v("分解前")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Cname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Grade")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("90")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("80")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("100")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("95")])])])]),t._v(" "),a("p",[t._v("以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：")]),t._v(" "),a("ul",[a("li",[t._v("Sno -> Sname, Sdept")]),t._v(" "),a("li",[t._v("Sdept -> Mname")]),t._v(" "),a("li",[t._v("Sno, Cname-> Grade")])]),t._v(" "),a("p",[t._v("Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。")]),t._v(" "),a("p",[t._v("Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。")]),t._v(" "),a("p",[a("strong",[t._v("分解后")])]),t._v(" "),a("p",[t._v("关系-1")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")])])])]),t._v(" "),a("p",[t._v("有以下函数依赖：")]),t._v(" "),a("ul",[a("li",[t._v("Sno -> Sname, Sdept, Mname")]),t._v(" "),a("li",[t._v("Sdept -> Mname")])]),t._v(" "),a("p",[t._v("关系-2")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Cname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Grade")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("90")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("80")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("100")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("95")])])])]),t._v(" "),a("p",[t._v("有以下函数依赖：")]),t._v(" "),a("ul",[a("li",[t._v("Sno, Cname -> Grade")])]),t._v(" "),a("h4",{attrs:{id:"第三范式-3nf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三范式-3nf"}},[t._v("#")]),t._v(" 第三范式 (3NF)")]),t._v(" "),a("ul",[a("li",[t._v("非主属性不传递依赖于键码。")])]),t._v(" "),a("p",[t._v("上面的 关系-1 中存在以下传递依赖：Sno -> Sdept -> Mname，可以进行以下分解：")]),t._v(" "),a("p",[t._v("关系-11")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")])])])]),t._v(" "),a("p",[t._v("关系-12")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")])])])]),t._v(" "),a("h2",{attrs:{id:"八、mysql-存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、mysql-存储引擎"}},[t._v("#")]),t._v(" 八、Mysql 存储引擎")]),t._v(" "),a("p",[t._v("Mysql 有多种存储引擎，"),a("strong",[t._v("不同的存储引擎保存数据和索引的方式是不同的，但表的定义则是在 Mysql 服务层统一处理的")]),t._v("。")]),t._v(" "),a("p",[t._v("简单列举几个存储引擎：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("InnoDB")]),t._v(" - Mysql 的默认事务型存储引擎，并提供了行级锁和外键的约束。性能不错且支持自动故障恢复。")]),t._v(" "),a("li",[a("strong",[t._v("MyISAM")]),t._v(" - Mysql 5.1 版本前的默认存储引擎。特性丰富但不支持事务，也不支持行级锁和外键，也没有故障恢复功能。")]),t._v(" "),a("li",[a("strong",[t._v("CSV")]),t._v(" - 可以将 CSV 文件作为 Mysql 的表来处理，但这种表不支持索引。")]),t._v(" "),a("li",[a("strong",[t._v("MEMORY")]),t._v(" 。所有的数据都在内存中，数据的处理速度快，但是安全性不高。")])]),t._v(" "),a("h3",{attrs:{id:"innodb-vs-myisam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb-vs-myisam"}},[t._v("#")]),t._v(" InnoDB vs. MyISAM")]),t._v(" "),a("p",[t._v("InnoDB 和 MyISAM 是目前使用的最多的两种 Mysql 存储引擎。")]),t._v(" "),a("ul",[a("li",[t._v("数据结构比较：\n"),a("ul",[a("li",[t._v("InnoDB 和 MyISAM 的索引数据结构"),a("strong",[t._v("都是 B+ 树")]),t._v("。")]),t._v(" "),a("li",[t._v("MyIASM 的 B+ 树中存储的内容实际上是实际数据的地址值。也就是说它的索引和实际数据是分开的，"),a("strong",[t._v("只不过使用索引指向了实际数据。这种索引的模式被称为非聚集索引。")])]),t._v(" "),a("li",[t._v("InnoDB 的 B+ 树中存储的内容是实际的数据，这种索引有被称为聚集索引。")])])]),t._v(" "),a("li",[t._v("事务支持比较：\n"),a("ul",[a("li",[t._v("InnoDB 支持事务，并提供了行级锁和外键的约束。")]),t._v(" "),a("li",[t._v("MyIASM 不支持事务，也不支持行级锁和外键。")])])]),t._v(" "),a("li",[t._v("故障恢复比较：\n"),a("ul",[a("li",[t._v("InnoDB 支持故障恢复。")]),t._v(" "),a("li",[t._v("MyISAM 不支持故障恢复。")])])])]),t._v(" "),a("h2",{attrs:{id:"九、数据库比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、数据库比较"}},[t._v("#")]),t._v(" 九、数据库比较")]),t._v(" "),a("h3",{attrs:{id:"常见数据库比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见数据库比较"}},[t._v("#")]),t._v(" 常见数据库比较")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Oracle")]),t._v(" - 久负盛名的商业数据库。功能强大、稳定。最大的缺点就是费钱。")]),t._v(" "),a("li",[a("code",[t._v("Mysql")]),t._v(" - 曾经是互联网公司的最爱，但自动 Mysql 被 Oracle 公司收购后，好日子可能一去不复返。很多公司或开源项目已经逐渐寻找其他的开源产品来替代 Mysql。")]),t._v(" "),a("li",[a("code",[t._v("MariaDB")]),t._v(" - 开源关系型数据库。 MySQL 的真正开源的发行版本，由 Mysql 部分核心人员创建。可作为 Mysql 的替代产品。")]),t._v(" "),a("li",[a("code",[t._v("PostgreSQL")]),t._v(" - 开源关系型数据库。和 MySQL 的工作方式非常相似，社区支持做得很好。可作为 Mysql 的替代产品。")]),t._v(" "),a("li",[a("code",[t._v("SQLite")]),t._v(" - 开源的轻量级数据库，移动端常常使用。")]),t._v(" "),a("li",[a("code",[t._v("H2")]),t._v(" - 内存数据库，一般用作开发、测试环境数据库。")]),t._v(" "),a("li",[a("code",[t._v("SQL Server")]),t._v(" - 微软 Windows 生态系统的数据库。我想，Java 程序员应该没人用吧。")])]),t._v(" "),a("h3",{attrs:{id:"oracle-vs-mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oracle-vs-mysql"}},[t._v("#")]),t._v(" Oracle vs. Mysql")]),t._v(" "),a("p",[t._v("目前为止，Java 领域用的最多的关系型数据库，应该还是 Oracle 和 Mysql，所以这里做一下比较。")]),t._v(" "),a("h4",{attrs:{id:"数据库对象差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库对象差异"}},[t._v("#")]),t._v(" 数据库对象差异")]),t._v(" "),a("p",[t._v("在 Mysql 中，"),a("strong",[t._v("一个用户可以创建多个库")]),t._v("。")]),t._v(" "),a("p",[t._v("而在 Oracle 中，Oracle 服务器是由两部分组成")]),t._v(" "),a("ul",[a("li",[t._v("数据库实例【理解为对象，看不见的】")]),t._v(" "),a("li",[t._v("数据库【理解为类，看得见的】")])]),t._v(" "),a("p",[a("strong",[t._v("一个数据库实例可拥有多个用户，一个用户默认拥有一个表空间。")])]),t._v(" "),a("p",[a("strong",[t._v("表空间是存储我们数据库表的地方，表空间内可以有多个文件。")])]),t._v(" "),a("h4",{attrs:{id:"sql-差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-差异"}},[t._v("#")]),t._v(" SQL 差异")]),t._v(" "),a("p",[t._v("（1）主键递增")]),t._v(" "),a("p",[t._v("Mysql 可以设置 "),a("code",[t._v("AUTO_INCREMENT")]),t._v(" 约束来指定主键为自增序列。")]),t._v(" "),a("p",[t._v("Oracle 需要通过 "),a("code",[t._v("CREATE SEQUENCE")]),t._v(" 创建序列。")]),t._v(" "),a("p",[t._v("（2）分页查询")]),t._v(" "),a("p",[t._v("Mysql 分页基于 "),a("code",[t._v("SELECT ... FROM ... LIMIT ...")]),t._v(" 完成，较简单。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" help_category "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" parent_category_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Oracle 分页基于 "),a("code",[t._v("SELECT ... FROM (SELECT ROWNUM ...) WHERE ...")]),t._v(" 完成，较复杂。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" rownum rr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" rr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" rr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"事务差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务差异"}},[t._v("#")]),t._v(" 事务差异")]),t._v(" "),a("ul",[a("li",[t._v("auto commit\n"),a("ul",[a("li",[t._v("Mysql 事务是 autocommit 模式，即自动提交事务；")]),t._v(" "),a("li",[t._v("Oracle 事务需要手动 "),a("code",[t._v("COMMIT")]),t._v("。")])])]),t._v(" "),a("li",[t._v("事务隔离级别\n"),a("ul",[a("li",[t._v("Mysql 默认的事务隔离级别是可重复读（"),a("code",[t._v("REPEATABLE READ")]),t._v("）")]),t._v(" "),a("li",[t._v("Oracle 支持读已提交（"),a("code",[t._v("READ COMMITTED")]),t._v("）和串行化（"),a("code",[t._v("SERIALIZABLE")]),t._v("） 两种事务隔离级别，默认事务隔离级别是读已提交（"),a("code",[t._v("READ COMMITTED")]),t._v("）")])])])]),t._v(" "),a("h3",{attrs:{id:"数据类型比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型比较"}},[t._v("#")]),t._v(" 数据类型比较")]),t._v(" "),a("blockquote",[a("p",[t._v("不同数据库中，对数据类型的支持是不一样的。")]),t._v(" "),a("p",[t._v("即使存在同一种数据类型，也可能存在名称不同、或大小不同等问题。")]),t._v(" "),a("p",[t._v("因此，对于数据类型的支持详情必须参考各数据库的官方文档。")])]),t._v(" "),a("p",[t._v("下面列举一些常见数据类型对比：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("数据类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Oracle")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("MySQL")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("PostgreSQL")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("boolean")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Byte")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("integer")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Int Integer")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Int Integer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("float")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Float")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Numeric")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("currency")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("N/A")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Money")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("string (fixed)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Char")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Char")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Char")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("string (variable)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Varchar Varchar2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Varchar")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Varchar")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("binary object")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Long Raw")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Blob Text")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Binary Varbinary")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("数据类型对比表摘自 "),a("a",{attrs:{href:"https://www.runoob.com/sql/sql-datatypes-general.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL 通用数据类型"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://www.runoob.com/sql/sql-datatypes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL 用于各种数据库的数据类型"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5a9ca0d6518825555c1d1acd",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库面试题(开发者必看)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/CyC2018/Interview-Notebook/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库系统原理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5b55b842f265da0f9e589e79",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库两大神器【索引和锁】"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/32b3e91aa22c",target:"_blank",rel:"noopener noreferrer"}},[t._v("分库分表需要考虑的问题及方案"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/bluishglc/article/details/7710738",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库分库分表(sharding)系列(二) 全局主键生成策略"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/bluishglc/article/details/7970268",target:"_blank",rel:"noopener noreferrer"}},[t._v("一种支持自由规划无须数据迁移和修改路由代码的 Sharding 扩容方案"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/transaction/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ShardingSphere 分布式事务"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/39651803",target:"_blank",rel:"noopener noreferrer"}},[t._v("mysql 和 oracle 的区别"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.runoob.com/sql/sql-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RUNOOB SQL 教程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gameinstitute.qq.com/community/detail/107154",target:"_blank",rel:"noopener noreferrer"}},[t._v("如果有人问你数据库的原理，叫他看这篇文章"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=v.exports}}]);